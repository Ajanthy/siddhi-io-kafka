{
    "docs": [
        {
            "location": "/", 
            "text": "siddhi-io-kafka\n\n\nThe \nsiddhi-io-kafka extension\n is an extension to \nSiddhi\n.\nThis implements siddhi kafka source and sink that can be used to receive events from a kafka cluster and to publish\nevents to a kafka cluster.\n\n\nThe Kafka Source receives records from a topic with a partition for a Kafka cluster which are in format such as\n\ntext\n, \nXML\n and \nJSON\n.\nThe Kafka Source will create the default partition for a given topic, if the topic is not already been created in the\nKafka cluster.\n\n\nThe Kafka Sink publishes records to a topic with a partition for a Kafka cluster which are in format such as \ntext\n,\n\nXML\n and \nJSON\n.\nThe Kafka Sink will create the default partition for a given topic, if the topic is not already been created in the\nKafka cluster.\nThe publishing topic and partition can be a dynamic value taken from the Siddhi event.\"\n\n\nFind some useful links below:\n\n\n\n\nSource code\n\n\nReleases\n\n\nIssue tracker\n\n\n\n\nLatest API Docs\n\n\nLatest API Docs is \n4.0.17\n.\n\n\nHow to use\n\n\nUsing the extension in \nWSO2 Stream Processor\n\n\nPrerequisites for using the feature\n\n - Download and install Kafka and Zookeeper.\n - Start the Apache ZooKeeper server with the following command: \nbin/zookeeper-server-start.sh config/zookeeper.properties\n.\n - Start the Kafka server with the following command:  \nbin/kafka-server-start.sh config/server.properties\n\n - Convert and copy the Kafka client jars from the \n/libs directory to the \n/libs directory as follows.\n   - Create a directory (SOURCE_DIRECTORY) in a preferred location in your machine and copy the following JARs to it from the\n   \n/libs directory.\n     - kafka_2.11-0.9.0.1.jar\n     - kafka-clients-0.9.0.1.jar\n     - metrics-core-2.2.0.jar\n     - scala-library-2.11.7.jar\n     - scala-parser-combinators_2.11-1.0.4.jar\n     - zkclient-0.7.jar\n     - zookeeper-3.4.6.jar\n   - Create another directory (DESTINATION_DIRECTORY) in a preferred location in your machine.\n   - To convert all the Kafka jars you copied into the \n, issue the following command.\n     For Windows: \n/bin/jartobundle.bat \n \n\n     For Linux: \n/bin/jartobundle.sh \n \n\n   - Copy the converted files from the \n to the \n/libs directory.\n   - Copy the jars that are not converted from the \n to the \n/samples/sample-clients/lib directory.\n\n\n\n\n\n\nYou can use this extension in the latest \nWSO2 Stream Processor\n that is a part of \nWSO2 Analytics\n offering, with editor, debugger and simulation support.\n\n\n\n\n\n\nThis extension is shipped by default with WSO2 Stream Processor, if you wish to use an alternative version of this\nextension you can replace the component \njar\n that can be found in the \nSTREAM_PROCESSOR_HOME\n/lib\n directory.\n\n\n\n\n\n\nUsing the extension as a \njava library\n\n\n\n\nThis extension can be added as a maven dependency along with other Siddhi dependencies to your project.\n\n\n\n\n     \ndependency\n\n        \ngroupId\norg.wso2.extension.siddhi.io.kafka\n/groupId\n\n        \nartifactId\nsiddhi-io-kafka\n/artifactId\n\n        \nversion\nx.x.x\n/version\n\n     \n/dependency\n\n\n\n\n\nJenkins Build Status\n\n\n\n\n\n\n\n\n\n\nBranch\n\n\nBuild Status\n\n\n\n\n\n\n\n\n\n\nmaster\n\n\n\n\n\n\n\n\n\n\n\n\nFeatures\n\n\n\n\nkafka\n \n(\n(Sink)\n)\nA Kafka sink publishes events processed by WSO2 SP to a topic with a partition for a Kafka cluster. The events can be published in the \nTEXT\n \nXML\n \nJSON\n or \nBinary\n format.\nIf the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic. The publishing topic and partition can be a dynamic value taken from the Siddhi event.\nTo configure a sink to use the Kafka transport, the \ntype\n parameter should have \nkafka\n as its value.\n\n\nkafkaMultiDC\n \n(\n(Sink)\n)\nA Kafka sink publishes events processed by WSO2 SP to a topic with a partition for a Kafka cluster. The events can be published in the \nTEXT\n \nXML\n \nJSON\n or \nBinary\n format.\nIf the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic. The publishing topic and partition can be a dynamic value taken from the Siddhi event.\nTo configure a sink to publish events via the Kafka transport, and using two Kafka brokers to publish events to the same topic, the \ntype\n parameter must have \nkafkaMultiDC\n as its value.\n\n\nkafka\n \n(\n(Source)\n)\nA Kafka source receives events to be processed by WSO2 SP from a topic with a partition for a Kafka cluster. The events received can be in the \nTEXT\n \nXML\n \nJSON\n or \nBinary\n format.\nIf the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic.\n\n\nkafkaMultiDC\n \n(\n(Source)\n)\nThe Kafka Multi Data Center(DC) Source receives records from the same topic in brokers deployed in two different kafka cluster. It will filter out all duplicate messages and try to ensurethat the events are received in the correct order by using sequence numbers. events are received in format such as \ntext\n, \nXML\n JSON\n and \nBinary`.The Kafka Source will create the default partition '0' for a given topic, if the topic is not already been created in the Kafka cluster.\n\n\n\n\nHow to Contribute\n\n\n\n\n\n\nPlease report issues at \nGitHub Issue Tracker\n.\n\n\n\n\n\n\nSend your contributions as pull requests to \nmaster branch\n.\n\n\n\n\n\n\nContact us\n\n\n\n\n\n\nPost your questions with the \n\"Siddhi\"\n tag in \nStackoverflow\n.\n\n\n\n\n\n\nSiddhi developers can be contacted via the mailing lists:\n\n\nDevelopers List   : \ndev@wso2.org\n\n\nArchitecture List : \narchitecture@wso2.org\n\n\n\n\n\n\nSupport\n\n\n\n\n\n\nWe are committed to ensuring support for this extension in production. Our unique approach ensures that all support leverages our open development methodology and is provided by the very same engineers who build the technology.\n\n\n\n\n\n\nFor more details and to take advantage of this unique opportunity contact us via \nhttp://wso2.com/support/\n.", 
            "title": "Welcome to WSO2 Siddhi IO Kafka"
        }, 
        {
            "location": "/#siddhi-io-kafka", 
            "text": "The  siddhi-io-kafka extension  is an extension to  Siddhi .\nThis implements siddhi kafka source and sink that can be used to receive events from a kafka cluster and to publish\nevents to a kafka cluster.  The Kafka Source receives records from a topic with a partition for a Kafka cluster which are in format such as text ,  XML  and  JSON .\nThe Kafka Source will create the default partition for a given topic, if the topic is not already been created in the\nKafka cluster.  The Kafka Sink publishes records to a topic with a partition for a Kafka cluster which are in format such as  text , XML  and  JSON .\nThe Kafka Sink will create the default partition for a given topic, if the topic is not already been created in the\nKafka cluster.\nThe publishing topic and partition can be a dynamic value taken from the Siddhi event.\"  Find some useful links below:   Source code  Releases  Issue tracker", 
            "title": "siddhi-io-kafka"
        }, 
        {
            "location": "/#latest-api-docs", 
            "text": "Latest API Docs is  4.0.17 .", 
            "title": "Latest API Docs"
        }, 
        {
            "location": "/#how-to-use", 
            "text": "Using the extension in  WSO2 Stream Processor  Prerequisites for using the feature \n - Download and install Kafka and Zookeeper.\n - Start the Apache ZooKeeper server with the following command:  bin/zookeeper-server-start.sh config/zookeeper.properties .\n - Start the Kafka server with the following command:   bin/kafka-server-start.sh config/server.properties \n - Convert and copy the Kafka client jars from the  /libs directory to the  /libs directory as follows.\n   - Create a directory (SOURCE_DIRECTORY) in a preferred location in your machine and copy the following JARs to it from the\n    /libs directory.\n     - kafka_2.11-0.9.0.1.jar\n     - kafka-clients-0.9.0.1.jar\n     - metrics-core-2.2.0.jar\n     - scala-library-2.11.7.jar\n     - scala-parser-combinators_2.11-1.0.4.jar\n     - zkclient-0.7.jar\n     - zookeeper-3.4.6.jar\n   - Create another directory (DESTINATION_DIRECTORY) in a preferred location in your machine.\n   - To convert all the Kafka jars you copied into the  , issue the following command.\n     For Windows:  /bin/jartobundle.bat    \n     For Linux:  /bin/jartobundle.sh    \n   - Copy the converted files from the   to the  /libs directory.\n   - Copy the jars that are not converted from the   to the  /samples/sample-clients/lib directory.    You can use this extension in the latest  WSO2 Stream Processor  that is a part of  WSO2 Analytics  offering, with editor, debugger and simulation support.    This extension is shipped by default with WSO2 Stream Processor, if you wish to use an alternative version of this\nextension you can replace the component  jar  that can be found in the  STREAM_PROCESSOR_HOME /lib  directory.    Using the extension as a  java library   This extension can be added as a maven dependency along with other Siddhi dependencies to your project.         dependency \n         groupId org.wso2.extension.siddhi.io.kafka /groupId \n         artifactId siddhi-io-kafka /artifactId \n         version x.x.x /version \n      /dependency", 
            "title": "How to use"
        }, 
        {
            "location": "/#jenkins-build-status", 
            "text": "Branch  Build Status      master", 
            "title": "Jenkins Build Status"
        }, 
        {
            "location": "/#features", 
            "text": "kafka   ( (Sink) ) A Kafka sink publishes events processed by WSO2 SP to a topic with a partition for a Kafka cluster. The events can be published in the  TEXT   XML   JSON  or  Binary  format. If the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic. The publishing topic and partition can be a dynamic value taken from the Siddhi event. To configure a sink to use the Kafka transport, the  type  parameter should have  kafka  as its value.  kafkaMultiDC   ( (Sink) ) A Kafka sink publishes events processed by WSO2 SP to a topic with a partition for a Kafka cluster. The events can be published in the  TEXT   XML   JSON  or  Binary  format. If the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic. The publishing topic and partition can be a dynamic value taken from the Siddhi event. To configure a sink to publish events via the Kafka transport, and using two Kafka brokers to publish events to the same topic, the  type  parameter must have  kafkaMultiDC  as its value.  kafka   ( (Source) ) A Kafka source receives events to be processed by WSO2 SP from a topic with a partition for a Kafka cluster. The events received can be in the  TEXT   XML   JSON  or  Binary  format. If the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic.  kafkaMultiDC   ( (Source) ) The Kafka Multi Data Center(DC) Source receives records from the same topic in brokers deployed in two different kafka cluster. It will filter out all duplicate messages and try to ensurethat the events are received in the correct order by using sequence numbers. events are received in format such as  text ,  XML  JSON  and  Binary`.The Kafka Source will create the default partition '0' for a given topic, if the topic is not already been created in the Kafka cluster.", 
            "title": "Features"
        }, 
        {
            "location": "/#how-to-contribute", 
            "text": "Please report issues at  GitHub Issue Tracker .    Send your contributions as pull requests to  master branch .", 
            "title": "How to Contribute"
        }, 
        {
            "location": "/#contact-us", 
            "text": "Post your questions with the  \"Siddhi\"  tag in  Stackoverflow .    Siddhi developers can be contacted via the mailing lists:  Developers List   :  dev@wso2.org  Architecture List :  architecture@wso2.org", 
            "title": "Contact us"
        }, 
        {
            "location": "/#support", 
            "text": "We are committed to ensuring support for this extension in production. Our unique approach ensures that all support leverages our open development methodology and is provided by the very same engineers who build the technology.    For more details and to take advantage of this unique opportunity contact us via  http://wso2.com/support/ .", 
            "title": "Support"
        }, 
        {
            "location": "/api/4.0.17/", 
            "text": "API Docs - v4.0.17\n\n\nSink\n\n\nkafka \n(Sink)\n\n\nA Kafka sink publishes events processed by WSO2 SP to a topic with a partition for a Kafka cluster. The events can be published in the \nTEXT\n \nXML\n \nJSON\n or \nBinary\n format.\nIf the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic. The publishing topic and partition can be a dynamic value taken from the Siddhi event.\nTo configure a sink to use the Kafka transport, the \ntype\n parameter should have \nkafka\n as its value.\n\n\n\nSyntax\n\n\n@sink(type=\nkafka\n, bootstrap.servers=\nSTRING\n, topic=\nSTRING\n, partition.no=\nINT\n, sequence.id=\nSTRING\n, key=\nSTRING\n, is.binary.message=\nBOOL\n, optional.configuration=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nbootstrap.servers\n\n        \n This parameter specifies the list of Kafka servers to which the Kafka sink must publish events. This list should be provided as a set of comma separated values. e.g., \nlocalhost:9092,localhost:9093\n.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntopic\n\n        \nThe topic to which the Kafka sink needs to publish events. Only one topic must be specified.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npartition.no\n\n        \nThe partition number for the given topic. Only one partition ID can be defined. If no value is specified for this parameter, the Kafka sink publishes to the default partition of the topic (i.e., 0)\n\n        \n0\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsequence.id\n\n        \nA unique identifier to identify the messages published by this sink. This ID allows receivers to identify the sink that published a specific message.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nkey\n\n        \nThe key contains the values that are used to maintain ordering in a Kafka partition.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nis.binary.message\n\n        \nTo send the binary events via kafka sink, it is needed to set this parameter value to \ntrue\n.\n\n        \nnull\n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \noptional.configuration\n\n        \nThis parameter contains all the other possible configurations that the producer is created with. \ne.g., \nproducer.type:async,batch.size:200\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@App:name('TestExecutionPlan') \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@sink(\ntype='kafka',\ntopic='topic_with_partitions',\npartition.no='0',\nbootstrap.servers='localhost:9092',\n@map(type='xml'))\nDefine stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThis Kafka sink configuration publishes to 0th partition of the topic named \ntopic_with_partitions\n.\n\n\n\nEXAMPLE 2\n\n\n@App:name('TestExecutionPlan') \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@sink(\ntype='kafka',\ntopic='{{symbol}}',\npartition.no='{{volume}}',\nbootstrap.servers='localhost:9092',\n@map(type='xml'))\nDefine stream BarStream (symbol string, price float, volume long); \nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\nThis query publishes dynamic topic and partitions that are taken from the Siddhi event. The value for \npartition.no\n is taken from the \nvolume\n attribute, and the topic value is taken from the \nsymbol\n attribute.\n\n\n\nkafkaMultiDC \n(Sink)\n\n\nA Kafka sink publishes events processed by WSO2 SP to a topic with a partition for a Kafka cluster. The events can be published in the \nTEXT\n \nXML\n \nJSON\n or \nBinary\n format.\nIf the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic. The publishing topic and partition can be a dynamic value taken from the Siddhi event.\nTo configure a sink to publish events via the Kafka transport, and using two Kafka brokers to publish events to the same topic, the \ntype\n parameter must have \nkafkaMultiDC\n as its value.\n\n\n\nSyntax\n\n\n@sink(type=\nkafkaMultiDC\n, bootstrap.servers=\nSTRING\n, topic=\nSTRING\n, sequence.id=\nSTRING\n, key=\nSTRING\n, partition.no=\nINT\n, is.binary.message=\nBOOL\n, optional.configuration=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nbootstrap.servers\n\n        \n This parameter specifies the list of Kafka servers to which the Kafka sink must publish events. This list should be provided as a set of comma separated values. There must be at least two servers in this list. e.g., \nlocalhost:9092,localhost:9093\n.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntopic\n\n        \nThe topic to which the Kafka sink needs to publish events. Only one topic must be specified.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nsequence.id\n\n        \nA unique identifier to identify the messages published by this sink. This ID allows receivers to identify the sink that published a specific message.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nkey\n\n        \nThe key contains the values that are used to maintain ordering in a Kafka partition.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \npartition.no\n\n        \nThe partition number for the given topic. Only one partition ID can be defined. If no value is specified for this parameter, the Kafka sink publishes to the default partition of the topic (i.e., 0)\n\n        \n0\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nis.binary.message\n\n        \nTo send the binary events via kafkaMultiDCSink, it is needed to set this parameter value to \ntrue\n.\n\n        \nnull\n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \noptional.configuration\n\n        \nThis parameter contains all the other possible configurations that the producer is created with. \ne.g., \nproducer.type:async,batch.size:200\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@App:name('TestExecutionPlan') \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@sink(type='kafkaMultiDC', topic='myTopic', partition.no='0',bootstrap.servers='host1:9092, host2:9092', @map(type='xml'))Define stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThis query publishes to the  default (i.e., 0th) partition of the brokers in two data centers \n\n\n\nSource\n\n\nkafka \n(Source)\n\n\nA Kafka source receives events to be processed by WSO2 SP from a topic with a partition for a Kafka cluster. The events received can be in the \nTEXT\n \nXML\n \nJSON\n or \nBinary\n format.\nIf the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic.\n\n\n\nSyntax\n\n\n@source(type=\nkafka\n, bootstrap.servers=\nSTRING\n, topic.list=\nSTRING\n, group.id=\nSTRING\n, threading.option=\nSTRING\n, partition.no.list=\nSTRING\n, seq.enabled=\nBOOL\n, is.binary.message=\nBOOL\n, optional.configuration=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nbootstrap.servers\n\n        \nThis specifies the list of Kafka servers to which the Kafka source must listen. This list should beprovided as a set of comma-separated values.\ne.g., \nlocalhost:9092,localhost:9093\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntopic.list\n\n        \nThis specifies the list of topics to which the source must listen. This list should be provided as a set of comma-separated values.\ne.g., \ntopic_one,topic_two\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ngroup.id\n\n        \nThis is an ID to identify the Kafka source group. The group ID ensures that sources with the same topic and partition that are in the same group do not receive the same event.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nthreading.option\n\n        \n This specifies whether the Kafka source is to be run on a single thread, or in multiple threads based on a condition. Possible values are as follows:\nsingle.thread\n: To run the Kafka source on a single thread.\ntopic-wise\n: To use  separate thread per topic.\npartition.wise\n: To use a separate thread per partition.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npartition.no.list\n\n        \nThe partition number list for the given topic. This is provided as a list of comma-separated values. e.g., \n0,1,2,\n.\n\n        \n0\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nseq.enabled\n\n        \nIf this parameter is set to \ntrue\n, the sequence of the events received via the source is taken into account. Therefore, each event should contain a sequence number as an attribute value to indicate the sequence.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nis.binary.message\n\n        \nTo receive the binary events via kafka source, it is needed to set this parameter value to \ntrue\n.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \noptional.configuration\n\n        \nThis parameter contains all the other possible configurations that the consumer is created with. \ne.g., \nssl.keystore.type:JKS,batch.size:200\n.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@App:name('TestExecutionPlan') \ndefine stream BarStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@source(\ntype='kafka', \ntopic.list='kafka_topic,kafka_topic2', \ngroup.id='test', \nthreading.option='partition.wise', \nbootstrap.servers='localhost:9092', \npartition.no.list='0,1', \n@map(type='xml'))\nDefine stream FooStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThis kafka source configuration listens to the \nkafka_topic\n and \nkafka_topic2\n topics with \n0\n and \n1\n partitions. A thread is created for each topic and partition combination. The events are received in the XML format, mapped to a Siddhi event, and sent to a stream named \nFooStream\n. \n\n\n\nEXAMPLE 2\n\n\n@App:name('TestExecutionPlan') \ndefine stream BarStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@source(\ntype='kafka', \ntopic.list='kafka_topic',\ngroup.id='test', \nthreading.option='single.thread',\nbootstrap.servers='localhost:9092',\n@map(type='xml'))\nDefine stream FooStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThis Kafka source configuration listens to the \nkafka_topic\n topic for the default partition because no \npartition.no.list\n is defined. Only one thread is created for the topic. The events are received in the XML format, mapped to a Siddhi event, and sent to a stream named \nFooStream\n.\n\n\n\nkafkaMultiDC \n(Source)\n\n\nThe Kafka Multi Data Center(DC) Source receives records from the same topic in brokers deployed in two different kafka cluster. It will filter out all duplicate messages and try to ensurethat the events are received in the correct order by using sequence numbers. events are received in format such as \ntext\n, \nXML\n JSON\n and \nBinary`.The Kafka Source will create the default partition '0' for a given topic, if the topic is not already been created in the Kafka cluster.\n\n\n\nSyntax\n\n\n@source(type=\nkafkaMultiDC\n, bootstrap.servers=\nSTRING\n, topic=\nSTRING\n, partition.no=\nINT\n, is.binary.message=\nBOOL\n, optional.configuration=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nbootstrap.servers\n\n        \nThis should contain the kafka server list which the kafka source should be listening to. This should be given in comma separated values. eg: 'localhost:9092,localhost:9093' \n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntopic\n\n        \nThe topic  which the source would be listening to. eg: 'topic_one' \n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npartition.no\n\n        \nThe partition number for the given topic\n\n        \n0\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nis.binary.message\n\n        \nTo receive the binary events via KafkaMultiDCSource, it is needed to set this parameter value to \ntrue\n.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \noptional.configuration\n\n        \nThis may contain all the other possible configurations which the consumer should be created with.eg: producer.type:async,batch.size:200\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@App:name('TestExecutionPlan') \ndefine stream BarStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@source(type='kafkaMultiDC', topic='kafka_topic', bootstrap.servers='host1:9092,host1:9093', partition.no='1', @map(type='xml'))\nDefine stream FooStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThe following query will listen to 'kafka_topic' topic deployed in broker host1:9092 and host1:9093 with partition 1. There will be a thread created for each broker. The receiving xml events will be mapped to a siddhi event and will be send to the FooStream.", 
            "title": "4.0.17"
        }, 
        {
            "location": "/api/4.0.17/#api-docs-v4017", 
            "text": "", 
            "title": "API Docs - v4.0.17"
        }, 
        {
            "location": "/api/4.0.17/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/4.0.17/#kafka-sink", 
            "text": "A Kafka sink publishes events processed by WSO2 SP to a topic with a partition for a Kafka cluster. The events can be published in the  TEXT   XML   JSON  or  Binary  format. If the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic. The publishing topic and partition can be a dynamic value taken from the Siddhi event. To configure a sink to use the Kafka transport, the  type  parameter should have  kafka  as its value.  Syntax  @sink(type= kafka , bootstrap.servers= STRING , topic= STRING , partition.no= INT , sequence.id= STRING , key= STRING , is.binary.message= BOOL , optional.configuration= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         bootstrap.servers \n          This parameter specifies the list of Kafka servers to which the Kafka sink must publish events. This list should be provided as a set of comma separated values. e.g.,  localhost:9092,localhost:9093 . \n         \n         STRING \n         No \n         No \n     \n     \n         topic \n         The topic to which the Kafka sink needs to publish events. Only one topic must be specified. \n         \n         STRING \n         No \n         No \n     \n     \n         partition.no \n         The partition number for the given topic. Only one partition ID can be defined. If no value is specified for this parameter, the Kafka sink publishes to the default partition of the topic (i.e., 0) \n         0 \n         INT \n         Yes \n         No \n     \n     \n         sequence.id \n         A unique identifier to identify the messages published by this sink. This ID allows receivers to identify the sink that published a specific message. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         key \n         The key contains the values that are used to maintain ordering in a Kafka partition. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         is.binary.message \n         To send the binary events via kafka sink, it is needed to set this parameter value to  true . \n         null \n         BOOL \n         No \n         No \n     \n     \n         optional.configuration \n         This parameter contains all the other possible configurations that the producer is created with.  e.g.,  producer.type:async,batch.size:200 \n         null \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @App:name('TestExecutionPlan') \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@sink(\ntype='kafka',\ntopic='topic_with_partitions',\npartition.no='0',\nbootstrap.servers='localhost:9092',\n@map(type='xml'))\nDefine stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  This Kafka sink configuration publishes to 0th partition of the topic named  topic_with_partitions .  EXAMPLE 2  @App:name('TestExecutionPlan') \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@sink(\ntype='kafka',\ntopic='{{symbol}}',\npartition.no='{{volume}}',\nbootstrap.servers='localhost:9092',\n@map(type='xml'))\nDefine stream BarStream (symbol string, price float, volume long); \nfrom FooStream select symbol, price, volume insert into BarStream;  This query publishes dynamic topic and partitions that are taken from the Siddhi event. The value for  partition.no  is taken from the  volume  attribute, and the topic value is taken from the  symbol  attribute.", 
            "title": "kafka (Sink)"
        }, 
        {
            "location": "/api/4.0.17/#kafkamultidc-sink", 
            "text": "A Kafka sink publishes events processed by WSO2 SP to a topic with a partition for a Kafka cluster. The events can be published in the  TEXT   XML   JSON  or  Binary  format. If the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic. The publishing topic and partition can be a dynamic value taken from the Siddhi event. To configure a sink to publish events via the Kafka transport, and using two Kafka brokers to publish events to the same topic, the  type  parameter must have  kafkaMultiDC  as its value.  Syntax  @sink(type= kafkaMultiDC , bootstrap.servers= STRING , topic= STRING , sequence.id= STRING , key= STRING , partition.no= INT , is.binary.message= BOOL , optional.configuration= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         bootstrap.servers \n          This parameter specifies the list of Kafka servers to which the Kafka sink must publish events. This list should be provided as a set of comma separated values. There must be at least two servers in this list. e.g.,  localhost:9092,localhost:9093 . \n         \n         STRING \n         No \n         No \n     \n     \n         topic \n         The topic to which the Kafka sink needs to publish events. Only one topic must be specified. \n         \n         STRING \n         No \n         No \n     \n     \n         sequence.id \n         A unique identifier to identify the messages published by this sink. This ID allows receivers to identify the sink that published a specific message. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         key \n         The key contains the values that are used to maintain ordering in a Kafka partition. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         partition.no \n         The partition number for the given topic. Only one partition ID can be defined. If no value is specified for this parameter, the Kafka sink publishes to the default partition of the topic (i.e., 0) \n         0 \n         INT \n         Yes \n         No \n     \n     \n         is.binary.message \n         To send the binary events via kafkaMultiDCSink, it is needed to set this parameter value to  true . \n         null \n         BOOL \n         No \n         No \n     \n     \n         optional.configuration \n         This parameter contains all the other possible configurations that the producer is created with.  e.g.,  producer.type:async,batch.size:200 \n         null \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @App:name('TestExecutionPlan') \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@sink(type='kafkaMultiDC', topic='myTopic', partition.no='0',bootstrap.servers='host1:9092, host2:9092', @map(type='xml'))Define stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  This query publishes to the  default (i.e., 0th) partition of the brokers in two data centers", 
            "title": "kafkaMultiDC (Sink)"
        }, 
        {
            "location": "/api/4.0.17/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/4.0.17/#kafka-source", 
            "text": "A Kafka source receives events to be processed by WSO2 SP from a topic with a partition for a Kafka cluster. The events received can be in the  TEXT   XML   JSON  or  Binary  format. If the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic.  Syntax  @source(type= kafka , bootstrap.servers= STRING , topic.list= STRING , group.id= STRING , threading.option= STRING , partition.no.list= STRING , seq.enabled= BOOL , is.binary.message= BOOL , optional.configuration= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         bootstrap.servers \n         This specifies the list of Kafka servers to which the Kafka source must listen. This list should beprovided as a set of comma-separated values. e.g.,  localhost:9092,localhost:9093 \n         \n         STRING \n         No \n         No \n     \n     \n         topic.list \n         This specifies the list of topics to which the source must listen. This list should be provided as a set of comma-separated values. e.g.,  topic_one,topic_two \n         \n         STRING \n         No \n         No \n     \n     \n         group.id \n         This is an ID to identify the Kafka source group. The group ID ensures that sources with the same topic and partition that are in the same group do not receive the same event. \n         \n         STRING \n         No \n         No \n     \n     \n         threading.option \n          This specifies whether the Kafka source is to be run on a single thread, or in multiple threads based on a condition. Possible values are as follows: single.thread : To run the Kafka source on a single thread. topic-wise : To use  separate thread per topic. partition.wise : To use a separate thread per partition. \n         \n         STRING \n         No \n         No \n     \n     \n         partition.no.list \n         The partition number list for the given topic. This is provided as a list of comma-separated values. e.g.,  0,1,2, . \n         0 \n         STRING \n         Yes \n         No \n     \n     \n         seq.enabled \n         If this parameter is set to  true , the sequence of the events received via the source is taken into account. Therefore, each event should contain a sequence number as an attribute value to indicate the sequence. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         is.binary.message \n         To receive the binary events via kafka source, it is needed to set this parameter value to  true . \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         optional.configuration \n         This parameter contains all the other possible configurations that the consumer is created with.  e.g.,  ssl.keystore.type:JKS,batch.size:200 . \n         null \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @App:name('TestExecutionPlan') \ndefine stream BarStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@source(\ntype='kafka', \ntopic.list='kafka_topic,kafka_topic2', \ngroup.id='test', \nthreading.option='partition.wise', \nbootstrap.servers='localhost:9092', \npartition.no.list='0,1', \n@map(type='xml'))\nDefine stream FooStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  This kafka source configuration listens to the  kafka_topic  and  kafka_topic2  topics with  0  and  1  partitions. A thread is created for each topic and partition combination. The events are received in the XML format, mapped to a Siddhi event, and sent to a stream named  FooStream .   EXAMPLE 2  @App:name('TestExecutionPlan') \ndefine stream BarStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@source(\ntype='kafka', \ntopic.list='kafka_topic',\ngroup.id='test', \nthreading.option='single.thread',\nbootstrap.servers='localhost:9092',\n@map(type='xml'))\nDefine stream FooStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  This Kafka source configuration listens to the  kafka_topic  topic for the default partition because no  partition.no.list  is defined. Only one thread is created for the topic. The events are received in the XML format, mapped to a Siddhi event, and sent to a stream named  FooStream .", 
            "title": "kafka (Source)"
        }, 
        {
            "location": "/api/4.0.17/#kafkamultidc-source", 
            "text": "The Kafka Multi Data Center(DC) Source receives records from the same topic in brokers deployed in two different kafka cluster. It will filter out all duplicate messages and try to ensurethat the events are received in the correct order by using sequence numbers. events are received in format such as  text ,  XML  JSON  and  Binary`.The Kafka Source will create the default partition '0' for a given topic, if the topic is not already been created in the Kafka cluster.  Syntax  @source(type= kafkaMultiDC , bootstrap.servers= STRING , topic= STRING , partition.no= INT , is.binary.message= BOOL , optional.configuration= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         bootstrap.servers \n         This should contain the kafka server list which the kafka source should be listening to. This should be given in comma separated values. eg: 'localhost:9092,localhost:9093'  \n         \n         STRING \n         No \n         No \n     \n     \n         topic \n         The topic  which the source would be listening to. eg: 'topic_one'  \n         \n         STRING \n         No \n         No \n     \n     \n         partition.no \n         The partition number for the given topic \n         0 \n         INT \n         Yes \n         No \n     \n     \n         is.binary.message \n         To receive the binary events via KafkaMultiDCSource, it is needed to set this parameter value to  true . \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         optional.configuration \n         This may contain all the other possible configurations which the consumer should be created with.eg: producer.type:async,batch.size:200 \n         null \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @App:name('TestExecutionPlan') \ndefine stream BarStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@source(type='kafkaMultiDC', topic='kafka_topic', bootstrap.servers='host1:9092,host1:9093', partition.no='1', @map(type='xml'))\nDefine stream FooStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  The following query will listen to 'kafka_topic' topic deployed in broker host1:9092 and host1:9093 with partition 1. There will be a thread created for each broker. The receiving xml events will be mapped to a siddhi event and will be send to the FooStream.", 
            "title": "kafkaMultiDC (Source)"
        }, 
        {
            "location": "/api/4.0.16/", 
            "text": "API Docs - v4.0.16\n\n\nSink\n\n\nkafka \n(Sink)\n\n\nA Kafka sink publishes events processed by WSO2 SP to a topic with a partition for a Kafka cluster. The events can be published in the \nTEXT\n \nXML\n \nJSON\n or \nBinary\n format.\nIf the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic. The publishing topic and partition can be a dynamic value taken from the Siddhi event.\nTo configure a sink to use the Kafka transport, the \ntype\n parameter should have \nkafka\n as its value.\n\n\n\nSyntax\n\n\n@sink(type=\nkafka\n, bootstrap.servers=\nSTRING\n, topic=\nSTRING\n, partition.no=\nINT\n, sequence.id=\nSTRING\n, key=\nSTRING\n, is.binary.message=\nBOOL\n, optional.configuration=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nbootstrap.servers\n\n        \n This parameter specifies the list of Kafka servers to which the Kafka sink must publish events. This list should be provided as a set of comma separated values. e.g., \nlocalhost:9092,localhost:9093\n.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntopic\n\n        \nThe topic to which the Kafka sink needs to publish events. Only one topic must be specified.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npartition.no\n\n        \nThe partition number for the given topic. Only one partition ID can be defined. If no value is specified for this parameter, the Kafka sink publishes to the default partition of the topic (i.e., 0)\n\n        \n0\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsequence.id\n\n        \nA unique identifier to identify the messages published by this sink. This ID allows receivers to identify the sink that published a specific message.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nkey\n\n        \nThe key contains the values that are used to maintain ordering in a Kafka partition.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nis.binary.message\n\n        \nTo send the binary events via kafka sink, it is needed to set this parameter value to \ntrue\n.\n\n        \nnull\n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \noptional.configuration\n\n        \nThis parameter contains all the other possible configurations that the producer is created with. \ne.g., \nproducer.type:async,batch.size:200\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@App:name('TestExecutionPlan') \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@sink(\ntype='kafka',\ntopic='topic_with_partitions',\npartition.no='0',\nbootstrap.servers='localhost:9092',\n@map(type='xml'))\nDefine stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThis Kafka sink configuration publishes to 0th partition of the topic named \ntopic_with_partitions\n.\n\n\n\nEXAMPLE 2\n\n\n@App:name('TestExecutionPlan') \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@sink(\ntype='kafka',\ntopic='{{symbol}}',\npartition.no='{{volume}}',\nbootstrap.servers='localhost:9092',\n@map(type='xml'))\nDefine stream BarStream (symbol string, price float, volume long); \nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\nThis query publishes dynamic topic and partitions that are taken from the Siddhi event. The value for \npartition.no\n is taken from the \nvolume\n attribute, and the topic value is taken from the \nsymbol\n attribute.\n\n\n\nkafkaMultiDC \n(Sink)\n\n\nA Kafka sink publishes events processed by WSO2 SP to a topic with a partition for a Kafka cluster. The events can be published in the \nTEXT\n \nXML\n \nJSON\n or \nBinary\n format.\nIf the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic. The publishing topic and partition can be a dynamic value taken from the Siddhi event.\nTo configure a sink to publish events via the Kafka transport, and using two Kafka brokers to publish events to the same topic, the \ntype\n parameter must have \nkafkaMultiDC\n as its value.\n\n\n\nSyntax\n\n\n@sink(type=\nkafkaMultiDC\n, bootstrap.servers=\nSTRING\n, topic=\nSTRING\n, sequence.id=\nSTRING\n, key=\nSTRING\n, partition.no=\nINT\n, is.binary.message=\nBOOL\n, optional.configuration=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nbootstrap.servers\n\n        \n This parameter specifies the list of Kafka servers to which the Kafka sink must publish events. This list should be provided as a set of comma separated values. There must be at least two servers in this list. e.g., \nlocalhost:9092,localhost:9093\n.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntopic\n\n        \nThe topic to which the Kafka sink needs to publish events. Only one topic must be specified.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nsequence.id\n\n        \nA unique identifier to identify the messages published by this sink. This ID allows receivers to identify the sink that published a specific message.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nkey\n\n        \nThe key contains the values that are used to maintain ordering in a Kafka partition.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \npartition.no\n\n        \nThe partition number for the given topic. Only one partition ID can be defined. If no value is specified for this parameter, the Kafka sink publishes to the default partition of the topic (i.e., 0)\n\n        \n0\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nis.binary.message\n\n        \nTo send the binary events via kafkaMultiDCSink, it is needed to set this parameter value to \ntrue\n.\n\n        \nnull\n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \noptional.configuration\n\n        \nThis parameter contains all the other possible configurations that the producer is created with. \ne.g., \nproducer.type:async,batch.size:200\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@App:name('TestExecutionPlan') \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@sink(type='kafkaMultiDC', topic='myTopic', partition.no='0',bootstrap.servers='host1:9092, host2:9092', @map(type='xml'))Define stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThis query publishes to the  default (i.e., 0th) partition of the brokers in two data centers \n\n\n\nSource\n\n\nkafka \n(Source)\n\n\nA Kafka source receives events to be processed by WSO2 SP from a topic with a partition for a Kafka cluster. The events received can be in the \nTEXT\n \nXML\n \nJSON\n or \nBinary\n format.\nIf the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic.\n\n\n\nSyntax\n\n\n@source(type=\nkafka\n, bootstrap.servers=\nSTRING\n, topic.list=\nSTRING\n, group.id=\nSTRING\n, threading.option=\nSTRING\n, partition.no.list=\nSTRING\n, seq.enabled=\nBOOL\n, is.binary.message=\nBOOL\n, optional.configuration=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nbootstrap.servers\n\n        \nThis specifies the list of Kafka servers to which the Kafka source must listen. This list should beprovided as a set of comma-separated values.\ne.g., \nlocalhost:9092,localhost:9093\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntopic.list\n\n        \nThis specifies the list of topics to which the source must listen. This list should be provided as a set of comma-separated values.\ne.g., \ntopic_one,topic_two\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ngroup.id\n\n        \nThis is an ID to identify the Kafka source group. The group ID ensures that sources with the same topic and partition that are in the same group do not receive the same event.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nthreading.option\n\n        \n This specifies whether the Kafka source is to be run on a single thread, or in multiple threads based on a condition. Possible values are as follows:\nsingle.thread\n: To run the Kafka source on a single thread.\ntopic-wise\n: To use  separate thread per topic.\npartition.wise\n: To use a separate thread per partition.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npartition.no.list\n\n        \nThe partition number list for the given topic. This is provided as a list of comma-separated values. e.g., \n0,1,2,\n.\n\n        \n0\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nseq.enabled\n\n        \nIf this parameter is set to \ntrue\n, the sequence of the events received via the source is taken into account. Therefore, each event should contain a sequence number as an attribute value to indicate the sequence.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nis.binary.message\n\n        \nTo receive the binary events via kafka source, it is needed to set this parameter value to \ntrue\n.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \noptional.configuration\n\n        \nThis parameter contains all the other possible configurations that the consumer is created with. \ne.g., \nssl.keystore.type:JKS,batch.size:200\n.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@App:name('TestExecutionPlan') \ndefine stream BarStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@source(\ntype='kafka', \ntopic.list='kafka_topic,kafka_topic2', \ngroup.id='test', \nthreading.option='partition.wise', \nbootstrap.servers='localhost:9092', \npartition.no.list='0,1', \n@map(type='xml'))\nDefine stream FooStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThis kafka source configuration listens to the \nkafka_topic\n and \nkafka_topic2\n topics with \n0\n and \n1\n partitions. A thread is created for each topic and partition combination. The events are received in the XML format, mapped to a Siddhi event, and sent to a stream named \nFooStream\n. \n\n\n\nEXAMPLE 2\n\n\n@App:name('TestExecutionPlan') \ndefine stream BarStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@source(\ntype='kafka', \ntopic.list='kafka_topic',\ngroup.id='test', \nthreading.option='single.thread',\nbootstrap.servers='localhost:9092',\n@map(type='xml'))\nDefine stream FooStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThis Kafka source configuration listens to the \nkafka_topic\n topic for the default partition because no \npartition.no.list\n is defined. Only one thread is created for the topic. The events are received in the XML format, mapped to a Siddhi event, and sent to a stream named \nFooStream\n.\n\n\n\nkafkaMultiDC \n(Source)\n\n\nThe Kafka Multi Data Center(DC) Source receives records from the same topic in brokers deployed in two different kafka cluster. It will filter out all duplicate messages and try to ensurethat the events are received in the correct order by using sequence numbers. events are received in format such as \ntext\n, \nXML\n JSON\n and \nBinary`.The Kafka Source will create the default partition '0' for a given topic, if the topic is not already been created in the Kafka cluster.\n\n\n\nSyntax\n\n\n@source(type=\nkafkaMultiDC\n, bootstrap.servers=\nSTRING\n, topic=\nSTRING\n, partition.no=\nINT\n, is.binary.message=\nBOOL\n, optional.configuration=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nbootstrap.servers\n\n        \nThis should contain the kafka server list which the kafka source should be listening to. This should be given in comma separated values. eg: 'localhost:9092,localhost:9093' \n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntopic\n\n        \nThe topic  which the source would be listening to. eg: 'topic_one' \n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npartition.no\n\n        \nThe partition number for the given topic\n\n        \n0\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nis.binary.message\n\n        \nTo receive the binary events via KafkaMultiDCSource, it is needed to set this parameter value to \ntrue\n.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \noptional.configuration\n\n        \nThis may contain all the other possible configurations which the consumer should be created with.eg: producer.type:async,batch.size:200\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@App:name('TestExecutionPlan') \ndefine stream BarStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@source(type='kafkaMultiDC', topic='kafka_topic', bootstrap.servers='host1:9092,host1:9093', partition.no='1', @map(type='xml'))\nDefine stream FooStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThe following query will listen to 'kafka_topic' topic deployed in broker host1:9092 and host1:9093 with partition 1. There will be a thread created for each broker. The receiving xml events will be mapped to a siddhi event and will be send to the FooStream.", 
            "title": "4.0.16"
        }, 
        {
            "location": "/api/4.0.16/#api-docs-v4016", 
            "text": "", 
            "title": "API Docs - v4.0.16"
        }, 
        {
            "location": "/api/4.0.16/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/4.0.16/#kafka-sink", 
            "text": "A Kafka sink publishes events processed by WSO2 SP to a topic with a partition for a Kafka cluster. The events can be published in the  TEXT   XML   JSON  or  Binary  format. If the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic. The publishing topic and partition can be a dynamic value taken from the Siddhi event. To configure a sink to use the Kafka transport, the  type  parameter should have  kafka  as its value.  Syntax  @sink(type= kafka , bootstrap.servers= STRING , topic= STRING , partition.no= INT , sequence.id= STRING , key= STRING , is.binary.message= BOOL , optional.configuration= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         bootstrap.servers \n          This parameter specifies the list of Kafka servers to which the Kafka sink must publish events. This list should be provided as a set of comma separated values. e.g.,  localhost:9092,localhost:9093 . \n         \n         STRING \n         No \n         No \n     \n     \n         topic \n         The topic to which the Kafka sink needs to publish events. Only one topic must be specified. \n         \n         STRING \n         No \n         No \n     \n     \n         partition.no \n         The partition number for the given topic. Only one partition ID can be defined. If no value is specified for this parameter, the Kafka sink publishes to the default partition of the topic (i.e., 0) \n         0 \n         INT \n         Yes \n         No \n     \n     \n         sequence.id \n         A unique identifier to identify the messages published by this sink. This ID allows receivers to identify the sink that published a specific message. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         key \n         The key contains the values that are used to maintain ordering in a Kafka partition. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         is.binary.message \n         To send the binary events via kafka sink, it is needed to set this parameter value to  true . \n         null \n         BOOL \n         No \n         No \n     \n     \n         optional.configuration \n         This parameter contains all the other possible configurations that the producer is created with.  e.g.,  producer.type:async,batch.size:200 \n         null \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @App:name('TestExecutionPlan') \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@sink(\ntype='kafka',\ntopic='topic_with_partitions',\npartition.no='0',\nbootstrap.servers='localhost:9092',\n@map(type='xml'))\nDefine stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  This Kafka sink configuration publishes to 0th partition of the topic named  topic_with_partitions .  EXAMPLE 2  @App:name('TestExecutionPlan') \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@sink(\ntype='kafka',\ntopic='{{symbol}}',\npartition.no='{{volume}}',\nbootstrap.servers='localhost:9092',\n@map(type='xml'))\nDefine stream BarStream (symbol string, price float, volume long); \nfrom FooStream select symbol, price, volume insert into BarStream;  This query publishes dynamic topic and partitions that are taken from the Siddhi event. The value for  partition.no  is taken from the  volume  attribute, and the topic value is taken from the  symbol  attribute.", 
            "title": "kafka (Sink)"
        }, 
        {
            "location": "/api/4.0.16/#kafkamultidc-sink", 
            "text": "A Kafka sink publishes events processed by WSO2 SP to a topic with a partition for a Kafka cluster. The events can be published in the  TEXT   XML   JSON  or  Binary  format. If the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic. The publishing topic and partition can be a dynamic value taken from the Siddhi event. To configure a sink to publish events via the Kafka transport, and using two Kafka brokers to publish events to the same topic, the  type  parameter must have  kafkaMultiDC  as its value.  Syntax  @sink(type= kafkaMultiDC , bootstrap.servers= STRING , topic= STRING , sequence.id= STRING , key= STRING , partition.no= INT , is.binary.message= BOOL , optional.configuration= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         bootstrap.servers \n          This parameter specifies the list of Kafka servers to which the Kafka sink must publish events. This list should be provided as a set of comma separated values. There must be at least two servers in this list. e.g.,  localhost:9092,localhost:9093 . \n         \n         STRING \n         No \n         No \n     \n     \n         topic \n         The topic to which the Kafka sink needs to publish events. Only one topic must be specified. \n         \n         STRING \n         No \n         No \n     \n     \n         sequence.id \n         A unique identifier to identify the messages published by this sink. This ID allows receivers to identify the sink that published a specific message. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         key \n         The key contains the values that are used to maintain ordering in a Kafka partition. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         partition.no \n         The partition number for the given topic. Only one partition ID can be defined. If no value is specified for this parameter, the Kafka sink publishes to the default partition of the topic (i.e., 0) \n         0 \n         INT \n         Yes \n         No \n     \n     \n         is.binary.message \n         To send the binary events via kafkaMultiDCSink, it is needed to set this parameter value to  true . \n         null \n         BOOL \n         No \n         No \n     \n     \n         optional.configuration \n         This parameter contains all the other possible configurations that the producer is created with.  e.g.,  producer.type:async,batch.size:200 \n         null \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @App:name('TestExecutionPlan') \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@sink(type='kafkaMultiDC', topic='myTopic', partition.no='0',bootstrap.servers='host1:9092, host2:9092', @map(type='xml'))Define stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  This query publishes to the  default (i.e., 0th) partition of the brokers in two data centers", 
            "title": "kafkaMultiDC (Sink)"
        }, 
        {
            "location": "/api/4.0.16/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/4.0.16/#kafka-source", 
            "text": "A Kafka source receives events to be processed by WSO2 SP from a topic with a partition for a Kafka cluster. The events received can be in the  TEXT   XML   JSON  or  Binary  format. If the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic.  Syntax  @source(type= kafka , bootstrap.servers= STRING , topic.list= STRING , group.id= STRING , threading.option= STRING , partition.no.list= STRING , seq.enabled= BOOL , is.binary.message= BOOL , optional.configuration= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         bootstrap.servers \n         This specifies the list of Kafka servers to which the Kafka source must listen. This list should beprovided as a set of comma-separated values. e.g.,  localhost:9092,localhost:9093 \n         \n         STRING \n         No \n         No \n     \n     \n         topic.list \n         This specifies the list of topics to which the source must listen. This list should be provided as a set of comma-separated values. e.g.,  topic_one,topic_two \n         \n         STRING \n         No \n         No \n     \n     \n         group.id \n         This is an ID to identify the Kafka source group. The group ID ensures that sources with the same topic and partition that are in the same group do not receive the same event. \n         \n         STRING \n         No \n         No \n     \n     \n         threading.option \n          This specifies whether the Kafka source is to be run on a single thread, or in multiple threads based on a condition. Possible values are as follows: single.thread : To run the Kafka source on a single thread. topic-wise : To use  separate thread per topic. partition.wise : To use a separate thread per partition. \n         \n         STRING \n         No \n         No \n     \n     \n         partition.no.list \n         The partition number list for the given topic. This is provided as a list of comma-separated values. e.g.,  0,1,2, . \n         0 \n         STRING \n         Yes \n         No \n     \n     \n         seq.enabled \n         If this parameter is set to  true , the sequence of the events received via the source is taken into account. Therefore, each event should contain a sequence number as an attribute value to indicate the sequence. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         is.binary.message \n         To receive the binary events via kafka source, it is needed to set this parameter value to  true . \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         optional.configuration \n         This parameter contains all the other possible configurations that the consumer is created with.  e.g.,  ssl.keystore.type:JKS,batch.size:200 . \n         null \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @App:name('TestExecutionPlan') \ndefine stream BarStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@source(\ntype='kafka', \ntopic.list='kafka_topic,kafka_topic2', \ngroup.id='test', \nthreading.option='partition.wise', \nbootstrap.servers='localhost:9092', \npartition.no.list='0,1', \n@map(type='xml'))\nDefine stream FooStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  This kafka source configuration listens to the  kafka_topic  and  kafka_topic2  topics with  0  and  1  partitions. A thread is created for each topic and partition combination. The events are received in the XML format, mapped to a Siddhi event, and sent to a stream named  FooStream .   EXAMPLE 2  @App:name('TestExecutionPlan') \ndefine stream BarStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@source(\ntype='kafka', \ntopic.list='kafka_topic',\ngroup.id='test', \nthreading.option='single.thread',\nbootstrap.servers='localhost:9092',\n@map(type='xml'))\nDefine stream FooStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  This Kafka source configuration listens to the  kafka_topic  topic for the default partition because no  partition.no.list  is defined. Only one thread is created for the topic. The events are received in the XML format, mapped to a Siddhi event, and sent to a stream named  FooStream .", 
            "title": "kafka (Source)"
        }, 
        {
            "location": "/api/4.0.16/#kafkamultidc-source", 
            "text": "The Kafka Multi Data Center(DC) Source receives records from the same topic in brokers deployed in two different kafka cluster. It will filter out all duplicate messages and try to ensurethat the events are received in the correct order by using sequence numbers. events are received in format such as  text ,  XML  JSON  and  Binary`.The Kafka Source will create the default partition '0' for a given topic, if the topic is not already been created in the Kafka cluster.  Syntax  @source(type= kafkaMultiDC , bootstrap.servers= STRING , topic= STRING , partition.no= INT , is.binary.message= BOOL , optional.configuration= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         bootstrap.servers \n         This should contain the kafka server list which the kafka source should be listening to. This should be given in comma separated values. eg: 'localhost:9092,localhost:9093'  \n         \n         STRING \n         No \n         No \n     \n     \n         topic \n         The topic  which the source would be listening to. eg: 'topic_one'  \n         \n         STRING \n         No \n         No \n     \n     \n         partition.no \n         The partition number for the given topic \n         0 \n         INT \n         Yes \n         No \n     \n     \n         is.binary.message \n         To receive the binary events via KafkaMultiDCSource, it is needed to set this parameter value to  true . \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         optional.configuration \n         This may contain all the other possible configurations which the consumer should be created with.eg: producer.type:async,batch.size:200 \n         null \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @App:name('TestExecutionPlan') \ndefine stream BarStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@source(type='kafkaMultiDC', topic='kafka_topic', bootstrap.servers='host1:9092,host1:9093', partition.no='1', @map(type='xml'))\nDefine stream FooStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  The following query will listen to 'kafka_topic' topic deployed in broker host1:9092 and host1:9093 with partition 1. There will be a thread created for each broker. The receiving xml events will be mapped to a siddhi event and will be send to the FooStream.", 
            "title": "kafkaMultiDC (Source)"
        }, 
        {
            "location": "/api/4.0.15/", 
            "text": "API Docs - v4.0.15\n\n\nSink\n\n\nkafka \n(Sink)\n\n\nA Kafka sink publishes events processed by WSO2 SP to a topic with a partition for a Kafka cluster. The events can be published in the \nTEXT\n \nXML\n \nJSON\n or \nBinary\n format.\nIf the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic. The publishing topic and partition can be a dynamic value taken from the Siddhi event.\nTo configure a sink to use the Kafka transport, the \ntype\n parameter should have \nkafka\n as its value.\n\n\n\nSyntax\n\n\n@sink(type=\nkafka\n, bootstrap.servers=\nSTRING\n, topic=\nSTRING\n, partition.no=\nINT\n, sequence.id=\nSTRING\n, key=\nSTRING\n, is.binary.message=\nBOOL\n, optional.configuration=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nbootstrap.servers\n\n        \n This parameter specifies the list of Kafka servers to which the Kafka sink must publish events. This list should be provided as a set of comma separated values. e.g., \nlocalhost:9092,localhost:9093\n.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntopic\n\n        \nThe topic to which the Kafka sink needs to publish events. Only one topic must be specified.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npartition.no\n\n        \nThe partition number for the given topic. Only one partition ID can be defined. If no value is specified for this parameter, the Kafka sink publishes to the default partition of the topic (i.e., 0)\n\n        \n0\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsequence.id\n\n        \nA unique identifier to identify the messages published by this sink. This ID allows receivers to identify the sink that published a specific message.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nkey\n\n        \nThe key contains the values that are used to maintain ordering in a Kafka partition.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nis.binary.message\n\n        \nTo send the binary events via kafka sink, it is needed to set this parameter value to \ntrue\n.\n\n        \nnull\n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \noptional.configuration\n\n        \nThis parameter contains all the other possible configurations that the producer is created with. \ne.g., \nproducer.type:async,batch.size:200\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@App:name('TestExecutionPlan') \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@sink(\ntype='kafka',\ntopic='topic_with_partitions',\npartition.no='0',\nbootstrap.servers='localhost:9092',\n@map(type='xml'))\nDefine stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThis Kafka sink configuration publishes to 0th partition of the topic named \ntopic_with_partitions\n.\n\n\n\nEXAMPLE 2\n\n\n@App:name('TestExecutionPlan') \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@sink(\ntype='kafka',\ntopic='{{symbol}}',\npartition.no='{{volume}}',\nbootstrap.servers='localhost:9092',\n@map(type='xml'))\nDefine stream BarStream (symbol string, price float, volume long); \nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\nThis query publishes dynamic topic and partitions that are taken from the Siddhi event. The value for \npartition.no\n is taken from the \nvolume\n attribute, and the topic value is taken from the \nsymbol\n attribute.\n\n\n\nkafkaMultiDC \n(Sink)\n\n\nA Kafka sink publishes events processed by WSO2 SP to a topic with a partition for a Kafka cluster. The events can be published in the \nTEXT\n \nXML\n \nJSON\n or \nBinary\n format.\nIf the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic. The publishing topic and partition can be a dynamic value taken from the Siddhi event.\nTo configure a sink to publish events via the Kafka transport, and using two Kafka brokers to publish events to the same topic, the \ntype\n parameter must have \nkafkaMultiDC\n as its value.\n\n\n\nSyntax\n\n\n@sink(type=\nkafkaMultiDC\n, bootstrap.servers=\nSTRING\n, topic=\nSTRING\n, sequence.id=\nSTRING\n, key=\nSTRING\n, partition.no=\nINT\n, is.binary.message=\nBOOL\n, optional.configuration=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nbootstrap.servers\n\n        \n This parameter specifies the list of Kafka servers to which the Kafka sink must publish events. This list should be provided as a set of comma separated values. There must be at least two servers in this list. e.g., \nlocalhost:9092,localhost:9093\n.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntopic\n\n        \nThe topic to which the Kafka sink needs to publish events. Only one topic must be specified.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nsequence.id\n\n        \nA unique identifier to identify the messages published by this sink. This ID allows receivers to identify the sink that published a specific message.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nkey\n\n        \nThe key contains the values that are used to maintain ordering in a Kafka partition.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \npartition.no\n\n        \nThe partition number for the given topic. Only one partition ID can be defined. If no value is specified for this parameter, the Kafka sink publishes to the default partition of the topic (i.e., 0)\n\n        \n0\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nis.binary.message\n\n        \nTo send the binary events via kafkaMultiDCSink, it is needed to set this parameter value to \ntrue\n.\n\n        \nnull\n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \noptional.configuration\n\n        \nThis parameter contains all the other possible configurations that the producer is created with. \ne.g., \nproducer.type:async,batch.size:200\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@App:name('TestExecutionPlan') \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@sink(type='kafkaMultiDC', topic='myTopic', partition.no='0',bootstrap.servers='host1:9092, host2:9092', @map(type='xml'))Define stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThis query publishes to the  default (i.e., 0th) partition of the brokers in two data centers \n\n\n\nSource\n\n\nkafka \n(Source)\n\n\nA Kafka source receives events to be processed by WSO2 SP from a topic with a partition for a Kafka cluster. The events received can be in the \nTEXT\n \nXML\n \nJSON\n or \nBinary\n format.\nIf the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic.\n\n\n\nSyntax\n\n\n@source(type=\nkafka\n, bootstrap.servers=\nSTRING\n, topic.list=\nSTRING\n, group.id=\nSTRING\n, threading.option=\nSTRING\n, partition.no.list=\nSTRING\n, seq.enabled=\nBOOL\n, is.binary.message=\nBOOL\n, optional.configuration=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nbootstrap.servers\n\n        \nThis specifies the list of Kafka servers to which the Kafka source must listen. This list should beprovided as a set of comma-separated values.\ne.g., \nlocalhost:9092,localhost:9093\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntopic.list\n\n        \nThis specifies the list of topics to which the source must listen. This list should be provided as a set of comma-separated values.\ne.g., \ntopic_one,topic_two\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ngroup.id\n\n        \nThis is an ID to identify the Kafka source group. The group ID ensures that sources with the same topic and partition that are in the same group do not receive the same event.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nthreading.option\n\n        \n This specifies whether the Kafka source is to be run on a single thread, or in multiple threads based on a condition. Possible values are as follows:\nsingle.thread\n: To run the Kafka source on a single thread.\ntopic-wise\n: To use  separate thread per topic.\npartition.wise\n: To use a separate thread per partition.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npartition.no.list\n\n        \nThe partition number list for the given topic. This is provided as a list of comma-separated values. e.g., \n0,1,2,\n.\n\n        \n0\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nseq.enabled\n\n        \nIf this parameter is set to \ntrue\n, the sequence of the events received via the source is taken into account. Therefore, each event should contain a sequence number as an attribute value to indicate the sequence.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nis.binary.message\n\n        \nTo receive the binary events via kafka source, it is needed to set this parameter value to \ntrue\n.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \noptional.configuration\n\n        \nThis parameter contains all the other possible configurations that the consumer is created with. \ne.g., \nssl.keystore.type:JKS,batch.size:200\n.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@App:name('TestExecutionPlan') \ndefine stream BarStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@source(\ntype='kafka', \ntopic.list='kafka_topic,kafka_topic2', \ngroup.id='test', \nthreading.option='partition.wise', \nbootstrap.servers='localhost:9092', \npartition.no.list='0,1', \n@map(type='xml'))\nDefine stream FooStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThis kafka source configuration listens to the \nkafka_topic\n and \nkafka_topic2\n topics with \n0\n and \n1\n partitions. A thread is created for each topic and partition combination. The events are received in the XML format, mapped to a Siddhi event, and sent to a stream named \nFooStream\n. \n\n\n\nEXAMPLE 2\n\n\n@App:name('TestExecutionPlan') \ndefine stream BarStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@source(\ntype='kafka', \ntopic.list='kafka_topic',\ngroup.id='test', \nthreading.option='single.thread',\nbootstrap.servers='localhost:9092',\n@map(type='xml'))\nDefine stream FooStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThis Kafka source configuration listens to the \nkafka_topic\n topic for the default partition because no \npartition.no.list\n is defined. Only one thread is created for the topic. The events are received in the XML format, mapped to a Siddhi event, and sent to a stream named \nFooStream\n.\n\n\n\nkafkaMultiDC \n(Source)\n\n\nThe Kafka Multi Data Center(DC) Source receives records from the same topic in brokers deployed in two different kafka cluster. It will filter out all duplicate messages and try to ensurethat the events are received in the correct order by using sequence numbers. events are received in format such as \ntext\n, \nXML\n JSON\n and \nBinary`.The Kafka Source will create the default partition '0' for a given topic, if the topic is not already been created in the Kafka cluster.\n\n\n\nSyntax\n\n\n@source(type=\nkafkaMultiDC\n, bootstrap.servers=\nSTRING\n, topic=\nSTRING\n, partition.no=\nINT\n, is.binary.message=\nBOOL\n, optional.configuration=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nbootstrap.servers\n\n        \nThis should contain the kafka server list which the kafka source should be listening to. This should be given in comma separated values. eg: 'localhost:9092,localhost:9093' \n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntopic\n\n        \nThe topic  which the source would be listening to. eg: 'topic_one' \n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npartition.no\n\n        \nThe partition number for the given topic\n\n        \n0\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nis.binary.message\n\n        \nTo receive the binary events via KafkaMultiDCSource, it is needed to set this parameter value to \ntrue\n.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \noptional.configuration\n\n        \nThis may contain all the other possible configurations which the consumer should be created with.eg: producer.type:async,batch.size:200\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@App:name('TestExecutionPlan') \ndefine stream BarStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@source(type='kafkaMultiDC', topic='kafka_topic', bootstrap.servers='host1:9092,host1:9093', partition.no='1', @map(type='xml'))\nDefine stream FooStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThe following query will listen to 'kafka_topic' topic deployed in broker host1:9092 and host1:9093 with partition 1. There will be a thread created for each broker. The receiving xml events will be mapped to a siddhi event and will be send to the FooStream.", 
            "title": "4.0.15"
        }, 
        {
            "location": "/api/4.0.15/#api-docs-v4015", 
            "text": "", 
            "title": "API Docs - v4.0.15"
        }, 
        {
            "location": "/api/4.0.15/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/4.0.15/#kafka-sink", 
            "text": "A Kafka sink publishes events processed by WSO2 SP to a topic with a partition for a Kafka cluster. The events can be published in the  TEXT   XML   JSON  or  Binary  format. If the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic. The publishing topic and partition can be a dynamic value taken from the Siddhi event. To configure a sink to use the Kafka transport, the  type  parameter should have  kafka  as its value.  Syntax  @sink(type= kafka , bootstrap.servers= STRING , topic= STRING , partition.no= INT , sequence.id= STRING , key= STRING , is.binary.message= BOOL , optional.configuration= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         bootstrap.servers \n          This parameter specifies the list of Kafka servers to which the Kafka sink must publish events. This list should be provided as a set of comma separated values. e.g.,  localhost:9092,localhost:9093 . \n         \n         STRING \n         No \n         No \n     \n     \n         topic \n         The topic to which the Kafka sink needs to publish events. Only one topic must be specified. \n         \n         STRING \n         No \n         No \n     \n     \n         partition.no \n         The partition number for the given topic. Only one partition ID can be defined. If no value is specified for this parameter, the Kafka sink publishes to the default partition of the topic (i.e., 0) \n         0 \n         INT \n         Yes \n         No \n     \n     \n         sequence.id \n         A unique identifier to identify the messages published by this sink. This ID allows receivers to identify the sink that published a specific message. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         key \n         The key contains the values that are used to maintain ordering in a Kafka partition. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         is.binary.message \n         To send the binary events via kafka sink, it is needed to set this parameter value to  true . \n         null \n         BOOL \n         No \n         No \n     \n     \n         optional.configuration \n         This parameter contains all the other possible configurations that the producer is created with.  e.g.,  producer.type:async,batch.size:200 \n         null \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @App:name('TestExecutionPlan') \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@sink(\ntype='kafka',\ntopic='topic_with_partitions',\npartition.no='0',\nbootstrap.servers='localhost:9092',\n@map(type='xml'))\nDefine stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  This Kafka sink configuration publishes to 0th partition of the topic named  topic_with_partitions .  EXAMPLE 2  @App:name('TestExecutionPlan') \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@sink(\ntype='kafka',\ntopic='{{symbol}}',\npartition.no='{{volume}}',\nbootstrap.servers='localhost:9092',\n@map(type='xml'))\nDefine stream BarStream (symbol string, price float, volume long); \nfrom FooStream select symbol, price, volume insert into BarStream;  This query publishes dynamic topic and partitions that are taken from the Siddhi event. The value for  partition.no  is taken from the  volume  attribute, and the topic value is taken from the  symbol  attribute.", 
            "title": "kafka (Sink)"
        }, 
        {
            "location": "/api/4.0.15/#kafkamultidc-sink", 
            "text": "A Kafka sink publishes events processed by WSO2 SP to a topic with a partition for a Kafka cluster. The events can be published in the  TEXT   XML   JSON  or  Binary  format. If the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic. The publishing topic and partition can be a dynamic value taken from the Siddhi event. To configure a sink to publish events via the Kafka transport, and using two Kafka brokers to publish events to the same topic, the  type  parameter must have  kafkaMultiDC  as its value.  Syntax  @sink(type= kafkaMultiDC , bootstrap.servers= STRING , topic= STRING , sequence.id= STRING , key= STRING , partition.no= INT , is.binary.message= BOOL , optional.configuration= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         bootstrap.servers \n          This parameter specifies the list of Kafka servers to which the Kafka sink must publish events. This list should be provided as a set of comma separated values. There must be at least two servers in this list. e.g.,  localhost:9092,localhost:9093 . \n         \n         STRING \n         No \n         No \n     \n     \n         topic \n         The topic to which the Kafka sink needs to publish events. Only one topic must be specified. \n         \n         STRING \n         No \n         No \n     \n     \n         sequence.id \n         A unique identifier to identify the messages published by this sink. This ID allows receivers to identify the sink that published a specific message. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         key \n         The key contains the values that are used to maintain ordering in a Kafka partition. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         partition.no \n         The partition number for the given topic. Only one partition ID can be defined. If no value is specified for this parameter, the Kafka sink publishes to the default partition of the topic (i.e., 0) \n         0 \n         INT \n         Yes \n         No \n     \n     \n         is.binary.message \n         To send the binary events via kafkaMultiDCSink, it is needed to set this parameter value to  true . \n         null \n         BOOL \n         No \n         No \n     \n     \n         optional.configuration \n         This parameter contains all the other possible configurations that the producer is created with.  e.g.,  producer.type:async,batch.size:200 \n         null \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @App:name('TestExecutionPlan') \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@sink(type='kafkaMultiDC', topic='myTopic', partition.no='0',bootstrap.servers='host1:9092, host2:9092', @map(type='xml'))Define stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  This query publishes to the  default (i.e., 0th) partition of the brokers in two data centers", 
            "title": "kafkaMultiDC (Sink)"
        }, 
        {
            "location": "/api/4.0.15/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/4.0.15/#kafka-source", 
            "text": "A Kafka source receives events to be processed by WSO2 SP from a topic with a partition for a Kafka cluster. The events received can be in the  TEXT   XML   JSON  or  Binary  format. If the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic.  Syntax  @source(type= kafka , bootstrap.servers= STRING , topic.list= STRING , group.id= STRING , threading.option= STRING , partition.no.list= STRING , seq.enabled= BOOL , is.binary.message= BOOL , optional.configuration= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         bootstrap.servers \n         This specifies the list of Kafka servers to which the Kafka source must listen. This list should beprovided as a set of comma-separated values. e.g.,  localhost:9092,localhost:9093 \n         \n         STRING \n         No \n         No \n     \n     \n         topic.list \n         This specifies the list of topics to which the source must listen. This list should be provided as a set of comma-separated values. e.g.,  topic_one,topic_two \n         \n         STRING \n         No \n         No \n     \n     \n         group.id \n         This is an ID to identify the Kafka source group. The group ID ensures that sources with the same topic and partition that are in the same group do not receive the same event. \n         \n         STRING \n         No \n         No \n     \n     \n         threading.option \n          This specifies whether the Kafka source is to be run on a single thread, or in multiple threads based on a condition. Possible values are as follows: single.thread : To run the Kafka source on a single thread. topic-wise : To use  separate thread per topic. partition.wise : To use a separate thread per partition. \n         \n         STRING \n         No \n         No \n     \n     \n         partition.no.list \n         The partition number list for the given topic. This is provided as a list of comma-separated values. e.g.,  0,1,2, . \n         0 \n         STRING \n         Yes \n         No \n     \n     \n         seq.enabled \n         If this parameter is set to  true , the sequence of the events received via the source is taken into account. Therefore, each event should contain a sequence number as an attribute value to indicate the sequence. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         is.binary.message \n         To receive the binary events via kafka source, it is needed to set this parameter value to  true . \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         optional.configuration \n         This parameter contains all the other possible configurations that the consumer is created with.  e.g.,  ssl.keystore.type:JKS,batch.size:200 . \n         null \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @App:name('TestExecutionPlan') \ndefine stream BarStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@source(\ntype='kafka', \ntopic.list='kafka_topic,kafka_topic2', \ngroup.id='test', \nthreading.option='partition.wise', \nbootstrap.servers='localhost:9092', \npartition.no.list='0,1', \n@map(type='xml'))\nDefine stream FooStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  This kafka source configuration listens to the  kafka_topic  and  kafka_topic2  topics with  0  and  1  partitions. A thread is created for each topic and partition combination. The events are received in the XML format, mapped to a Siddhi event, and sent to a stream named  FooStream .   EXAMPLE 2  @App:name('TestExecutionPlan') \ndefine stream BarStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@source(\ntype='kafka', \ntopic.list='kafka_topic',\ngroup.id='test', \nthreading.option='single.thread',\nbootstrap.servers='localhost:9092',\n@map(type='xml'))\nDefine stream FooStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  This Kafka source configuration listens to the  kafka_topic  topic for the default partition because no  partition.no.list  is defined. Only one thread is created for the topic. The events are received in the XML format, mapped to a Siddhi event, and sent to a stream named  FooStream .", 
            "title": "kafka (Source)"
        }, 
        {
            "location": "/api/4.0.15/#kafkamultidc-source", 
            "text": "The Kafka Multi Data Center(DC) Source receives records from the same topic in brokers deployed in two different kafka cluster. It will filter out all duplicate messages and try to ensurethat the events are received in the correct order by using sequence numbers. events are received in format such as  text ,  XML  JSON  and  Binary`.The Kafka Source will create the default partition '0' for a given topic, if the topic is not already been created in the Kafka cluster.  Syntax  @source(type= kafkaMultiDC , bootstrap.servers= STRING , topic= STRING , partition.no= INT , is.binary.message= BOOL , optional.configuration= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         bootstrap.servers \n         This should contain the kafka server list which the kafka source should be listening to. This should be given in comma separated values. eg: 'localhost:9092,localhost:9093'  \n         \n         STRING \n         No \n         No \n     \n     \n         topic \n         The topic  which the source would be listening to. eg: 'topic_one'  \n         \n         STRING \n         No \n         No \n     \n     \n         partition.no \n         The partition number for the given topic \n         0 \n         INT \n         Yes \n         No \n     \n     \n         is.binary.message \n         To receive the binary events via KafkaMultiDCSource, it is needed to set this parameter value to  true . \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         optional.configuration \n         This may contain all the other possible configurations which the consumer should be created with.eg: producer.type:async,batch.size:200 \n         null \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @App:name('TestExecutionPlan') \ndefine stream BarStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@source(type='kafkaMultiDC', topic='kafka_topic', bootstrap.servers='host1:9092,host1:9093', partition.no='1', @map(type='xml'))\nDefine stream FooStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  The following query will listen to 'kafka_topic' topic deployed in broker host1:9092 and host1:9093 with partition 1. There will be a thread created for each broker. The receiving xml events will be mapped to a siddhi event and will be send to the FooStream.", 
            "title": "kafkaMultiDC (Source)"
        }, 
        {
            "location": "/api/4.0.14/", 
            "text": "API Docs - v4.0.14\n\n\nSink\n\n\nkafka \n(Sink)\n\n\nA Kafka sink publishes events processed by WSO2 SP to a topic with a partition for a Kafka cluster. The events can be published in the \nTEXT\n \nXML\n \nJSON\n or \nBinary\n format.\nIf the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic. The publishing topic and partition can be a dynamic value taken from the Siddhi event.\nTo configure a sink to use the Kafka transport, the \ntype\n parameter should have \nkafka\n as its value.\n\n\n\nSyntax\n\n\n@sink(type=\nkafka\n, bootstrap.servers=\nSTRING\n, topic=\nSTRING\n, partition.no=\nINT\n, sequence.id=\nSTRING\n, key=\nSTRING\n, is.binary.message=\nBOOL\n, optional.configuration=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nbootstrap.servers\n\n        \n This parameter specifies the list of Kafka servers to which the Kafka sink must publish events. This list should be provided as a set of comma separated values. e.g., \nlocalhost:9092,localhost:9093\n.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntopic\n\n        \nThe topic to which the Kafka sink needs to publish events. Only one topic must be specified.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npartition.no\n\n        \nThe partition number for the given topic. Only one partition ID can be defined. If no value is specified for this parameter, the Kafka sink publishes to the default partition of the topic (i.e., 0)\n\n        \n0\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsequence.id\n\n        \nA unique identifier to identify the messages published by this sink. This ID allows receivers to identify the sink that published a specific message.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nkey\n\n        \nThe key contains the values that are used to maintain ordering in a Kafka partition.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nis.binary.message\n\n        \nTo send the binary events via kafka sink, it is needed to set this parameter value to \ntrue\n.\n\n        \nnull\n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \noptional.configuration\n\n        \nThis parameter contains all the other possible configurations that the producer is created with. \ne.g., \nproducer.type:async,batch.size:200\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@App:name('TestExecutionPlan') \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@sink(\ntype='kafka',\ntopic='topic_with_partitions',\npartition.no='0',\nbootstrap.servers='localhost:9092',\n@map(type='xml'))\nDefine stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThis Kafka sink configuration publishes to 0th partition of the topic named \ntopic_with_partitions\n.\n\n\n\nEXAMPLE 2\n\n\n@App:name('TestExecutionPlan') \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@sink(\ntype='kafka',\ntopic='{{symbol}}',\npartition.no='{{volume}}',\nbootstrap.servers='localhost:9092',\n@map(type='xml'))\nDefine stream BarStream (symbol string, price float, volume long); \nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\nThis query publishes dynamic topic and partitions that are taken from the Siddhi event. The value for \npartition.no\n is taken from the \nvolume\n attribute, and the topic value is taken from the \nsymbol\n attribute.\n\n\n\nkafkaMultiDC \n(Sink)\n\n\nA Kafka sink publishes events processed by WSO2 SP to a topic with a partition for a Kafka cluster. The events can be published in the \nTEXT\n \nXML\n \nJSON\n or \nBinary\n format.\nIf the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic. The publishing topic and partition can be a dynamic value taken from the Siddhi event.\nTo configure a sink to publish events via the Kafka transport, and using two Kafka brokers to publish events to the same topic, the \ntype\n parameter must have \nkafkaMultiDC\n as its value.\n\n\n\nSyntax\n\n\n@sink(type=\nkafkaMultiDC\n, bootstrap.servers=\nSTRING\n, topic=\nSTRING\n, sequence.id=\nSTRING\n, key=\nSTRING\n, partition.no=\nINT\n, is.binary.message=\nBOOL\n, optional.configuration=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nbootstrap.servers\n\n        \n This parameter specifies the list of Kafka servers to which the Kafka sink must publish events. This list should be provided as a set of comma separated values. There must be at least two servers in this list. e.g., \nlocalhost:9092,localhost:9093\n.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntopic\n\n        \nThe topic to which the Kafka sink needs to publish events. Only one topic must be specified.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nsequence.id\n\n        \nA unique identifier to identify the messages published by this sink. This ID allows receivers to identify the sink that published a specific message.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nkey\n\n        \nThe key contains the values that are used to maintain ordering in a Kafka partition.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \npartition.no\n\n        \nThe partition number for the given topic. Only one partition ID can be defined. If no value is specified for this parameter, the Kafka sink publishes to the default partition of the topic (i.e., 0)\n\n        \n0\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nis.binary.message\n\n        \nTo send the binary events via kafkaMultiDCSink, it is needed to set this parameter value to \ntrue\n.\n\n        \nnull\n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \noptional.configuration\n\n        \nThis parameter contains all the other possible configurations that the producer is created with. \ne.g., \nproducer.type:async,batch.size:200\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@App:name('TestExecutionPlan') \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@sink(type='kafkaMultiDC', topic='myTopic', partition.no='0',bootstrap.servers='host1:9092, host2:9092', @map(type='xml'))Define stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThis query publishes to the  default (i.e., 0th) partition of the brokers in two data centers \n\n\n\nSource\n\n\nkafka \n(Source)\n\n\nA Kafka source receives events to be processed by WSO2 SP from a topic with a partition for a Kafka cluster. The events received can be in the \nTEXT\n \nXML\n \nJSON\n or \nBinary\n format.\nIf the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic.\n\n\n\nSyntax\n\n\n@source(type=\nkafka\n, bootstrap.servers=\nSTRING\n, topic.list=\nSTRING\n, group.id=\nSTRING\n, threading.option=\nSTRING\n, partition.no.list=\nSTRING\n, seq.enabled=\nBOOL\n, is.binary.message=\nBOOL\n, optional.configuration=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nbootstrap.servers\n\n        \nThis specifies the list of Kafka servers to which the Kafka source must listen. This list should beprovided as a set of comma-separated values.\ne.g., \nlocalhost:9092,localhost:9093\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntopic.list\n\n        \nThis specifies the list of topics to which the source must listen. This list should be provided as a set of comma-separated values.\ne.g., \ntopic_one,topic_two\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ngroup.id\n\n        \nThis is an ID to identify the Kafka source group. The group ID ensures that sources with the same topic and partition that are in the same group do not receive the same event.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nthreading.option\n\n        \n This specifies whether the Kafka source is to be run on a single thread, or in multiple threads based on a condition. Possible values are as follows:\nsingle.thread\n: To run the Kafka source on a single thread.\ntopic-wise\n: To use  separate thread per topic.\npartition.wise\n: To use a separate thread per partition.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npartition.no.list\n\n        \nThe partition number list for the given topic. This is provided as a list of comma-separated values. e.g., \n0,1,2,\n.\n\n        \n0\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nseq.enabled\n\n        \nIf this parameter is set to \ntrue\n, the sequence of the events received via the source is taken into account. Therefore, each event should contain a sequence number as an attribute value to indicate the sequence.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nis.binary.message\n\n        \nTo receive the binary events via kafka source, it is needed to set this parameter value to \ntrue\n.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \noptional.configuration\n\n        \nThis parameter contains all the other possible configurations that the consumer is created with. \ne.g., \nssl.keystore.type:JKS,batch.size:200\n.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@App:name('TestExecutionPlan') \ndefine stream BarStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@source(\ntype='kafka', \ntopic.list='kafka_topic,kafka_topic2', \ngroup.id='test', \nthreading.option='partition.wise', \nbootstrap.servers='localhost:9092', \npartition.no.list='0,1', \n@map(type='xml'))\nDefine stream FooStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThis kafka source configuration listens to the \nkafka_topic\n and \nkafka_topic2\n topics with \n0\n and \n1\n partitions. A thread is created for each topic and partition combination. The events are received in the XML format, mapped to a Siddhi event, and sent to a stream named \nFooStream\n. \n\n\n\nEXAMPLE 2\n\n\n@App:name('TestExecutionPlan') \ndefine stream BarStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@source(\ntype='kafka', \ntopic.list='kafka_topic',\ngroup.id='test', \nthreading.option='single.thread',\nbootstrap.servers='localhost:9092',\n@map(type='xml'))\nDefine stream FooStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThis Kafka source configuration listens to the \nkafka_topic\n topic for the default partition because no \npartition.no.list\n is defined. Only one thread is created for the topic. The events are received in the XML format, mapped to a Siddhi event, and sent to a stream named \nFooStream\n.\n\n\n\nkafkaMultiDC \n(Source)\n\n\nThe Kafka Multi Data Center(DC) Source receives records from the same topic in brokers deployed in two different kafka cluster. It will filter out all duplicate messages and try to ensurethat the events are received in the correct order by using sequence numbers. events are received in format such as \ntext\n, \nXML\n JSON\n and \nBinary`.The Kafka Source will create the default partition '0' for a given topic, if the topic is not already been created in the Kafka cluster.\n\n\n\nSyntax\n\n\n@source(type=\nkafkaMultiDC\n, bootstrap.servers=\nSTRING\n, topic=\nSTRING\n, partition.no=\nINT\n, is.binary.message=\nBOOL\n, optional.configuration=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nbootstrap.servers\n\n        \nThis should contain the kafka server list which the kafka source should be listening to. This should be given in comma separated values. eg: 'localhost:9092,localhost:9093' \n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntopic\n\n        \nThe topic  which the source would be listening to. eg: 'topic_one' \n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npartition.no\n\n        \nThe partition number for the given topic\n\n        \n0\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nis.binary.message\n\n        \nTo receive the binary events via KafkaMultiDCSource, it is needed to set this parameter value to \ntrue\n.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \noptional.configuration\n\n        \nThis may contain all the other possible configurations which the consumer should be created with.eg: producer.type:async,batch.size:200\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@App:name('TestExecutionPlan') \ndefine stream BarStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@source(type='kafkaMultiDC', topic='kafka_topic', bootstrap.servers='host1:9092,host1:9093', partition.no='1', @map(type='xml'))\nDefine stream FooStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThe following query will listen to 'kafka_topic' topic deployed in broker host1:9092 and host1:9093 with partition 1. There will be a thread created for each broker. The receiving xml events will be mapped to a siddhi event and will be send to the FooStream.", 
            "title": "4.0.14"
        }, 
        {
            "location": "/api/4.0.14/#api-docs-v4014", 
            "text": "", 
            "title": "API Docs - v4.0.14"
        }, 
        {
            "location": "/api/4.0.14/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/4.0.14/#kafka-sink", 
            "text": "A Kafka sink publishes events processed by WSO2 SP to a topic with a partition for a Kafka cluster. The events can be published in the  TEXT   XML   JSON  or  Binary  format. If the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic. The publishing topic and partition can be a dynamic value taken from the Siddhi event. To configure a sink to use the Kafka transport, the  type  parameter should have  kafka  as its value.  Syntax  @sink(type= kafka , bootstrap.servers= STRING , topic= STRING , partition.no= INT , sequence.id= STRING , key= STRING , is.binary.message= BOOL , optional.configuration= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         bootstrap.servers \n          This parameter specifies the list of Kafka servers to which the Kafka sink must publish events. This list should be provided as a set of comma separated values. e.g.,  localhost:9092,localhost:9093 . \n         \n         STRING \n         No \n         No \n     \n     \n         topic \n         The topic to which the Kafka sink needs to publish events. Only one topic must be specified. \n         \n         STRING \n         No \n         No \n     \n     \n         partition.no \n         The partition number for the given topic. Only one partition ID can be defined. If no value is specified for this parameter, the Kafka sink publishes to the default partition of the topic (i.e., 0) \n         0 \n         INT \n         Yes \n         No \n     \n     \n         sequence.id \n         A unique identifier to identify the messages published by this sink. This ID allows receivers to identify the sink that published a specific message. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         key \n         The key contains the values that are used to maintain ordering in a Kafka partition. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         is.binary.message \n         To send the binary events via kafka sink, it is needed to set this parameter value to  true . \n         null \n         BOOL \n         No \n         No \n     \n     \n         optional.configuration \n         This parameter contains all the other possible configurations that the producer is created with.  e.g.,  producer.type:async,batch.size:200 \n         null \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @App:name('TestExecutionPlan') \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@sink(\ntype='kafka',\ntopic='topic_with_partitions',\npartition.no='0',\nbootstrap.servers='localhost:9092',\n@map(type='xml'))\nDefine stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  This Kafka sink configuration publishes to 0th partition of the topic named  topic_with_partitions .  EXAMPLE 2  @App:name('TestExecutionPlan') \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@sink(\ntype='kafka',\ntopic='{{symbol}}',\npartition.no='{{volume}}',\nbootstrap.servers='localhost:9092',\n@map(type='xml'))\nDefine stream BarStream (symbol string, price float, volume long); \nfrom FooStream select symbol, price, volume insert into BarStream;  This query publishes dynamic topic and partitions that are taken from the Siddhi event. The value for  partition.no  is taken from the  volume  attribute, and the topic value is taken from the  symbol  attribute.", 
            "title": "kafka (Sink)"
        }, 
        {
            "location": "/api/4.0.14/#kafkamultidc-sink", 
            "text": "A Kafka sink publishes events processed by WSO2 SP to a topic with a partition for a Kafka cluster. The events can be published in the  TEXT   XML   JSON  or  Binary  format. If the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic. The publishing topic and partition can be a dynamic value taken from the Siddhi event. To configure a sink to publish events via the Kafka transport, and using two Kafka brokers to publish events to the same topic, the  type  parameter must have  kafkaMultiDC  as its value.  Syntax  @sink(type= kafkaMultiDC , bootstrap.servers= STRING , topic= STRING , sequence.id= STRING , key= STRING , partition.no= INT , is.binary.message= BOOL , optional.configuration= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         bootstrap.servers \n          This parameter specifies the list of Kafka servers to which the Kafka sink must publish events. This list should be provided as a set of comma separated values. There must be at least two servers in this list. e.g.,  localhost:9092,localhost:9093 . \n         \n         STRING \n         No \n         No \n     \n     \n         topic \n         The topic to which the Kafka sink needs to publish events. Only one topic must be specified. \n         \n         STRING \n         No \n         No \n     \n     \n         sequence.id \n         A unique identifier to identify the messages published by this sink. This ID allows receivers to identify the sink that published a specific message. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         key \n         The key contains the values that are used to maintain ordering in a Kafka partition. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         partition.no \n         The partition number for the given topic. Only one partition ID can be defined. If no value is specified for this parameter, the Kafka sink publishes to the default partition of the topic (i.e., 0) \n         0 \n         INT \n         Yes \n         No \n     \n     \n         is.binary.message \n         To send the binary events via kafkaMultiDCSink, it is needed to set this parameter value to  true . \n         null \n         BOOL \n         No \n         No \n     \n     \n         optional.configuration \n         This parameter contains all the other possible configurations that the producer is created with.  e.g.,  producer.type:async,batch.size:200 \n         null \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @App:name('TestExecutionPlan') \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@sink(type='kafkaMultiDC', topic='myTopic', partition.no='0',bootstrap.servers='host1:9092, host2:9092', @map(type='xml'))Define stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  This query publishes to the  default (i.e., 0th) partition of the brokers in two data centers", 
            "title": "kafkaMultiDC (Sink)"
        }, 
        {
            "location": "/api/4.0.14/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/4.0.14/#kafka-source", 
            "text": "A Kafka source receives events to be processed by WSO2 SP from a topic with a partition for a Kafka cluster. The events received can be in the  TEXT   XML   JSON  or  Binary  format. If the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic.  Syntax  @source(type= kafka , bootstrap.servers= STRING , topic.list= STRING , group.id= STRING , threading.option= STRING , partition.no.list= STRING , seq.enabled= BOOL , is.binary.message= BOOL , optional.configuration= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         bootstrap.servers \n         This specifies the list of Kafka servers to which the Kafka source must listen. This list should beprovided as a set of comma-separated values. e.g.,  localhost:9092,localhost:9093 \n         \n         STRING \n         No \n         No \n     \n     \n         topic.list \n         This specifies the list of topics to which the source must listen. This list should be provided as a set of comma-separated values. e.g.,  topic_one,topic_two \n         \n         STRING \n         No \n         No \n     \n     \n         group.id \n         This is an ID to identify the Kafka source group. The group ID ensures that sources with the same topic and partition that are in the same group do not receive the same event. \n         \n         STRING \n         No \n         No \n     \n     \n         threading.option \n          This specifies whether the Kafka source is to be run on a single thread, or in multiple threads based on a condition. Possible values are as follows: single.thread : To run the Kafka source on a single thread. topic-wise : To use  separate thread per topic. partition.wise : To use a separate thread per partition. \n         \n         STRING \n         No \n         No \n     \n     \n         partition.no.list \n         The partition number list for the given topic. This is provided as a list of comma-separated values. e.g.,  0,1,2, . \n         0 \n         STRING \n         Yes \n         No \n     \n     \n         seq.enabled \n         If this parameter is set to  true , the sequence of the events received via the source is taken into account. Therefore, each event should contain a sequence number as an attribute value to indicate the sequence. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         is.binary.message \n         To receive the binary events via kafka source, it is needed to set this parameter value to  true . \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         optional.configuration \n         This parameter contains all the other possible configurations that the consumer is created with.  e.g.,  ssl.keystore.type:JKS,batch.size:200 . \n         null \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @App:name('TestExecutionPlan') \ndefine stream BarStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@source(\ntype='kafka', \ntopic.list='kafka_topic,kafka_topic2', \ngroup.id='test', \nthreading.option='partition.wise', \nbootstrap.servers='localhost:9092', \npartition.no.list='0,1', \n@map(type='xml'))\nDefine stream FooStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  This kafka source configuration listens to the  kafka_topic  and  kafka_topic2  topics with  0  and  1  partitions. A thread is created for each topic and partition combination. The events are received in the XML format, mapped to a Siddhi event, and sent to a stream named  FooStream .   EXAMPLE 2  @App:name('TestExecutionPlan') \ndefine stream BarStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@source(\ntype='kafka', \ntopic.list='kafka_topic',\ngroup.id='test', \nthreading.option='single.thread',\nbootstrap.servers='localhost:9092',\n@map(type='xml'))\nDefine stream FooStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  This Kafka source configuration listens to the  kafka_topic  topic for the default partition because no  partition.no.list  is defined. Only one thread is created for the topic. The events are received in the XML format, mapped to a Siddhi event, and sent to a stream named  FooStream .", 
            "title": "kafka (Source)"
        }, 
        {
            "location": "/api/4.0.14/#kafkamultidc-source", 
            "text": "The Kafka Multi Data Center(DC) Source receives records from the same topic in brokers deployed in two different kafka cluster. It will filter out all duplicate messages and try to ensurethat the events are received in the correct order by using sequence numbers. events are received in format such as  text ,  XML  JSON  and  Binary`.The Kafka Source will create the default partition '0' for a given topic, if the topic is not already been created in the Kafka cluster.  Syntax  @source(type= kafkaMultiDC , bootstrap.servers= STRING , topic= STRING , partition.no= INT , is.binary.message= BOOL , optional.configuration= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         bootstrap.servers \n         This should contain the kafka server list which the kafka source should be listening to. This should be given in comma separated values. eg: 'localhost:9092,localhost:9093'  \n         \n         STRING \n         No \n         No \n     \n     \n         topic \n         The topic  which the source would be listening to. eg: 'topic_one'  \n         \n         STRING \n         No \n         No \n     \n     \n         partition.no \n         The partition number for the given topic \n         0 \n         INT \n         Yes \n         No \n     \n     \n         is.binary.message \n         To receive the binary events via KafkaMultiDCSource, it is needed to set this parameter value to  true . \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         optional.configuration \n         This may contain all the other possible configurations which the consumer should be created with.eg: producer.type:async,batch.size:200 \n         null \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @App:name('TestExecutionPlan') \ndefine stream BarStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@source(type='kafkaMultiDC', topic='kafka_topic', bootstrap.servers='host1:9092,host1:9093', partition.no='1', @map(type='xml'))\nDefine stream FooStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  The following query will listen to 'kafka_topic' topic deployed in broker host1:9092 and host1:9093 with partition 1. There will be a thread created for each broker. The receiving xml events will be mapped to a siddhi event and will be send to the FooStream.", 
            "title": "kafkaMultiDC (Source)"
        }, 
        {
            "location": "/api/4.0.13/", 
            "text": "API Docs - v4.0.13\n\n\nSink\n\n\nkafka \n(Sink)\n\n\nA Kafka sink publishes events processed by WSO2 SP to a topic with a partition for a Kafka cluster. The events can be published in the \nTEXT\n \nXML\n or \nJSON\n format.\nIf the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic. The publishing topic and partition can be a dynamic value taken from the Siddhi event.\nTo configure a sink to use the Kafka transport, the \ntype\n parameter should have \nkafka\n as its value.\n\n\n\nSyntax\n\n\n@sink(type=\nkafka\n, bootstrap.servers=\nSTRING\n, topic=\nSTRING\n, partition.no=\nINT\n, sequence.id=\nSTRING\n, key=\nSTRING\n, optional.configuration=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nbootstrap.servers\n\n        \n This parameter specifies the list of Kafka servers to which the Kafka sink must publish events. This list should be provided as a set of comma separated values. e.g., \nlocalhost:9092,localhost:9093\n.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntopic\n\n        \nThe topic to which the Kafka sink needs to publish events. Only one topic must be specified.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npartition.no\n\n        \nThe partition number for the given topic. Only one partition ID can be defined. If no value is specified for this parameter, the Kafka sink publishes to the default partition of the topic (i.e., 0)\n\n        \n0\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsequence.id\n\n        \nA unique identifier to identify the messages published by this sink. This ID allows receivers to identify the sink that published a specific message.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nkey\n\n        \nThe key contains the values that are used to maintain ordering in a Kafka partition.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \noptional.configuration\n\n        \nThis parameter contains all the other possible configurations that the producer is created with. \ne.g., \nproducer.type:async,batch.size:200\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@App:name('TestExecutionPlan') \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@sink(\ntype='kafka',\ntopic='topic_with_partitions',\npartition.no='0',\nbootstrap.servers='localhost:9092',\n@map(type='xml'))\nDefine stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThis Kafka sink configuration publishes to 0th partition of the topic named \ntopic_with_partitions\n.\n\n\n\nEXAMPLE 2\n\n\n@App:name('TestExecutionPlan') \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@sink(\ntype='kafka',\ntopic='{{symbol}}',\npartition.no='{{volume}}',\nbootstrap.servers='localhost:9092',\n@map(type='xml'))\nDefine stream BarStream (symbol string, price float, volume long); \nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\nThis query publishes dynamic topic and partitions that are taken from the Siddhi event. The value for \npartition.no\n is taken from the \nvolume\n attribute, and the topic value is taken from the \nsymbol\n attribute.\n\n\n\nkafkaMultiDC \n(Sink)\n\n\nA Kafka sink publishes events processed by WSO2 SP to a topic with a partition for a Kafka cluster. The events can be published in the \nTEXT\n \nXML\n or \nJSON\n format.\nIf the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic. The publishing topic and partition can be a dynamic value taken from the Siddhi event.\nTo configure a sink to publish events via the Kafka transport, and using two Kafka brokers to publish events to the same topic, the \ntype\n parameter must have \nkafkaMultiDC\n as its value.\n\n\n\nSyntax\n\n\n@sink(type=\nkafkaMultiDC\n, bootstrap.servers=\nSTRING\n, topic=\nSTRING\n, sequence.id=\nSTRING\n, key=\nSTRING\n, partition.no=\nINT\n, optional.configuration=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nbootstrap.servers\n\n        \n This parameter specifies the list of Kafka servers to which the Kafka sink must publish events. This list should be provided as a set of comma separated values. There must be at least two servers in this list. e.g., \nlocalhost:9092,localhost:9093\n.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntopic\n\n        \nThe topic to which the Kafka sink needs to publish events. Only one topic must be specified.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nsequence.id\n\n        \nA unique identifier to identify the messages published by this sink. This ID allows receivers to identify the sink that published a specific message.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nkey\n\n        \nThe key contains the values that are used to maintain ordering in a Kafka partition.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \npartition.no\n\n        \nThe partition number for the given topic. Only one partition ID can be defined. If no value is specified for this parameter, the Kafka sink publishes to the default partition of the topic (i.e., 0)\n\n        \n0\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \noptional.configuration\n\n        \nThis parameter contains all the other possible configurations that the producer is created with. \ne.g., \nproducer.type:async,batch.size:200\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@App:name('TestExecutionPlan') \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@sink(type='kafkaMultiDC', topic='myTopic', partition.no='0',bootstrap.servers='host1:9092, host2:9092', @map(type='xml'))Define stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThis query publishes to the  default (i.e., 0th) partition of the brokers in two data centers \n\n\n\nSource\n\n\nkafka \n(Source)\n\n\nA Kafka source receives events to be processed by WSO2 SP from a topic with a partition for a Kafka cluster. The events received can be in the \nTEXT\n \nXML\n or \nJSON\n format.\nIf the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic.\n\n\n\nSyntax\n\n\n@source(type=\nkafka\n, bootstrap.servers=\nSTRING\n, topic.list=\nSTRING\n, group.id=\nSTRING\n, threading.option=\nSTRING\n, partition.no.list=\nSTRING\n, seq.enabled=\nBOOL\n, optional.configuration=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nbootstrap.servers\n\n        \nThis specifies the list of Kafka servers to which the Kafka source must listen. This list should beprovided as a set of comma-separated values.\ne.g., \nlocalhost:9092,localhost:9093\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntopic.list\n\n        \nThis specifies the list of topics to which the source must listen. This list should be provided as a set of comma-separated values.\ne.g., \ntopic_one,topic_two\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ngroup.id\n\n        \nThis is an ID to identify the Kafka source group. The group ID ensures that sources with the same topic and partition that are in the same group do not receive the same event.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nthreading.option\n\n        \n This specifies whether the Kafka source is to be run on a single thread, or in multiple threads based on a condition. Possible values are as follows:\nsingle.thread\n: To run the Kafka source on a single thread.\ntopic-wise\n: To use  separate thread per topic.\npartition.wise\n: To use a separate thread per partition.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npartition.no.list\n\n        \nThe partition number list for the given topic. This is provided as a list of comma-separated values. e.g., \n0,1,2,\n.\n\n        \n0\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nseq.enabled\n\n        \nIf this parameter is set to \ntrue\n, the sequence of the events received via the source is taken into account. Therefore, each event should contain a sequence number as an attribute value to indicate the sequence.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \noptional.configuration\n\n        \nThis parameter contains all the other possible configurations that the consumer is created with. \ne.g., \nssl.keystore.type:JKS,batch.size:200\n.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@App:name('TestExecutionPlan') \ndefine stream BarStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@source(\ntype='kafka', \ntopic.list='kafka_topic,kafka_topic2', \ngroup.id='test', \nthreading.option='partition.wise', \nbootstrap.servers='localhost:9092', \npartition.no.list='0,1', \n@map(type='xml'))\nDefine stream FooStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThis kafka source configuration listens to the \nkafka_topic\n and \nkafka_topic2\n topics with \n0\n and \n1\n partitions. A thread is created for each topic and partition combination. The events are received in the XML format, mapped to a Siddhi event, and sent to a stream named \nFooStream\n. \n\n\n\nEXAMPLE 2\n\n\n@App:name('TestExecutionPlan') \ndefine stream BarStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@source(\ntype='kafka', \ntopic.list='kafka_topic',\ngroup.id='test', \nthreading.option='single.thread',\nbootstrap.servers='localhost:9092',\n@map(type='xml'))\nDefine stream FooStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThis Kafka source configuration listens to the \nkafka_topic\n topic for the default partition because no \npartition.no.list\n is defined. Only one thread is created for the topic. The events are received in the XML format, mapped to a Siddhi event, and sent to a stream named \nFooStream\n.\n\n\n\nkafkaMultiDC \n(Source)\n\n\nThe Kafka Multi Data Center(DC) Source receives records from the same topic in brokers deployed in two different kafka cluster. It will filter out all duplicate messages and try to ensurethat the events are received in the correct order by using sequence numbers. events are received in format such as \ntext\n, \nXML\n and \nJSON\n.The Kafka Source will create the default partition  '0' for a given topic, if the topic is not already been created in the Kafka cluster.\n\n\n\nSyntax\n\n\n@source(type=\nkafkaMultiDC\n, bootstrap.servers=\nSTRING\n, topic=\nSTRING\n, partition.no=\nINT\n, optional.configuration=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nbootstrap.servers\n\n        \nThis should contain the kafka server list which the kafka source should be listening to. This should be given in comma separated values. eg: 'localhost:9092,localhost:9093' \n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntopic\n\n        \nThe topic  which the source would be listening to. eg: 'topic_one' \n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npartition.no\n\n        \nThe partition number for the given topic\n\n        \n0\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \noptional.configuration\n\n        \nThis may contain all the other possible configurations which the consumer should be created with.eg: producer.type:async,batch.size:200\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@App:name('TestExecutionPlan') \ndefine stream BarStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@source(type='kafkaMultiDC', topic='kafka_topic', bootstrap.servers='host1:9092,host1:9093', partition.no='1', @map(type='xml'))\nDefine stream FooStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThe following query will listen to 'kafka_topic' topic deployed in broker host1:9092 and host1:9093 with partition 1. There will be a thread created for each broker. The receiving xml events will be mapped to a siddhi event and will be send to the FooStream.", 
            "title": "4.0.13"
        }, 
        {
            "location": "/api/4.0.13/#api-docs-v4013", 
            "text": "", 
            "title": "API Docs - v4.0.13"
        }, 
        {
            "location": "/api/4.0.13/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/4.0.13/#kafka-sink", 
            "text": "A Kafka sink publishes events processed by WSO2 SP to a topic with a partition for a Kafka cluster. The events can be published in the  TEXT   XML  or  JSON  format. If the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic. The publishing topic and partition can be a dynamic value taken from the Siddhi event. To configure a sink to use the Kafka transport, the  type  parameter should have  kafka  as its value.  Syntax  @sink(type= kafka , bootstrap.servers= STRING , topic= STRING , partition.no= INT , sequence.id= STRING , key= STRING , optional.configuration= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         bootstrap.servers \n          This parameter specifies the list of Kafka servers to which the Kafka sink must publish events. This list should be provided as a set of comma separated values. e.g.,  localhost:9092,localhost:9093 . \n         \n         STRING \n         No \n         No \n     \n     \n         topic \n         The topic to which the Kafka sink needs to publish events. Only one topic must be specified. \n         \n         STRING \n         No \n         No \n     \n     \n         partition.no \n         The partition number for the given topic. Only one partition ID can be defined. If no value is specified for this parameter, the Kafka sink publishes to the default partition of the topic (i.e., 0) \n         0 \n         INT \n         Yes \n         No \n     \n     \n         sequence.id \n         A unique identifier to identify the messages published by this sink. This ID allows receivers to identify the sink that published a specific message. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         key \n         The key contains the values that are used to maintain ordering in a Kafka partition. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         optional.configuration \n         This parameter contains all the other possible configurations that the producer is created with.  e.g.,  producer.type:async,batch.size:200 \n         null \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @App:name('TestExecutionPlan') \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@sink(\ntype='kafka',\ntopic='topic_with_partitions',\npartition.no='0',\nbootstrap.servers='localhost:9092',\n@map(type='xml'))\nDefine stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  This Kafka sink configuration publishes to 0th partition of the topic named  topic_with_partitions .  EXAMPLE 2  @App:name('TestExecutionPlan') \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@sink(\ntype='kafka',\ntopic='{{symbol}}',\npartition.no='{{volume}}',\nbootstrap.servers='localhost:9092',\n@map(type='xml'))\nDefine stream BarStream (symbol string, price float, volume long); \nfrom FooStream select symbol, price, volume insert into BarStream;  This query publishes dynamic topic and partitions that are taken from the Siddhi event. The value for  partition.no  is taken from the  volume  attribute, and the topic value is taken from the  symbol  attribute.", 
            "title": "kafka (Sink)"
        }, 
        {
            "location": "/api/4.0.13/#kafkamultidc-sink", 
            "text": "A Kafka sink publishes events processed by WSO2 SP to a topic with a partition for a Kafka cluster. The events can be published in the  TEXT   XML  or  JSON  format. If the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic. The publishing topic and partition can be a dynamic value taken from the Siddhi event. To configure a sink to publish events via the Kafka transport, and using two Kafka brokers to publish events to the same topic, the  type  parameter must have  kafkaMultiDC  as its value.  Syntax  @sink(type= kafkaMultiDC , bootstrap.servers= STRING , topic= STRING , sequence.id= STRING , key= STRING , partition.no= INT , optional.configuration= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         bootstrap.servers \n          This parameter specifies the list of Kafka servers to which the Kafka sink must publish events. This list should be provided as a set of comma separated values. There must be at least two servers in this list. e.g.,  localhost:9092,localhost:9093 . \n         \n         STRING \n         No \n         No \n     \n     \n         topic \n         The topic to which the Kafka sink needs to publish events. Only one topic must be specified. \n         \n         STRING \n         No \n         No \n     \n     \n         sequence.id \n         A unique identifier to identify the messages published by this sink. This ID allows receivers to identify the sink that published a specific message. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         key \n         The key contains the values that are used to maintain ordering in a Kafka partition. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         partition.no \n         The partition number for the given topic. Only one partition ID can be defined. If no value is specified for this parameter, the Kafka sink publishes to the default partition of the topic (i.e., 0) \n         0 \n         INT \n         Yes \n         No \n     \n     \n         optional.configuration \n         This parameter contains all the other possible configurations that the producer is created with.  e.g.,  producer.type:async,batch.size:200 \n         null \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @App:name('TestExecutionPlan') \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@sink(type='kafkaMultiDC', topic='myTopic', partition.no='0',bootstrap.servers='host1:9092, host2:9092', @map(type='xml'))Define stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  This query publishes to the  default (i.e., 0th) partition of the brokers in two data centers", 
            "title": "kafkaMultiDC (Sink)"
        }, 
        {
            "location": "/api/4.0.13/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/4.0.13/#kafka-source", 
            "text": "A Kafka source receives events to be processed by WSO2 SP from a topic with a partition for a Kafka cluster. The events received can be in the  TEXT   XML  or  JSON  format. If the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic.  Syntax  @source(type= kafka , bootstrap.servers= STRING , topic.list= STRING , group.id= STRING , threading.option= STRING , partition.no.list= STRING , seq.enabled= BOOL , optional.configuration= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         bootstrap.servers \n         This specifies the list of Kafka servers to which the Kafka source must listen. This list should beprovided as a set of comma-separated values. e.g.,  localhost:9092,localhost:9093 \n         \n         STRING \n         No \n         No \n     \n     \n         topic.list \n         This specifies the list of topics to which the source must listen. This list should be provided as a set of comma-separated values. e.g.,  topic_one,topic_two \n         \n         STRING \n         No \n         No \n     \n     \n         group.id \n         This is an ID to identify the Kafka source group. The group ID ensures that sources with the same topic and partition that are in the same group do not receive the same event. \n         \n         STRING \n         No \n         No \n     \n     \n         threading.option \n          This specifies whether the Kafka source is to be run on a single thread, or in multiple threads based on a condition. Possible values are as follows: single.thread : To run the Kafka source on a single thread. topic-wise : To use  separate thread per topic. partition.wise : To use a separate thread per partition. \n         \n         STRING \n         No \n         No \n     \n     \n         partition.no.list \n         The partition number list for the given topic. This is provided as a list of comma-separated values. e.g.,  0,1,2, . \n         0 \n         STRING \n         Yes \n         No \n     \n     \n         seq.enabled \n         If this parameter is set to  true , the sequence of the events received via the source is taken into account. Therefore, each event should contain a sequence number as an attribute value to indicate the sequence. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         optional.configuration \n         This parameter contains all the other possible configurations that the consumer is created with.  e.g.,  ssl.keystore.type:JKS,batch.size:200 . \n         null \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @App:name('TestExecutionPlan') \ndefine stream BarStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@source(\ntype='kafka', \ntopic.list='kafka_topic,kafka_topic2', \ngroup.id='test', \nthreading.option='partition.wise', \nbootstrap.servers='localhost:9092', \npartition.no.list='0,1', \n@map(type='xml'))\nDefine stream FooStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  This kafka source configuration listens to the  kafka_topic  and  kafka_topic2  topics with  0  and  1  partitions. A thread is created for each topic and partition combination. The events are received in the XML format, mapped to a Siddhi event, and sent to a stream named  FooStream .   EXAMPLE 2  @App:name('TestExecutionPlan') \ndefine stream BarStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@source(\ntype='kafka', \ntopic.list='kafka_topic',\ngroup.id='test', \nthreading.option='single.thread',\nbootstrap.servers='localhost:9092',\n@map(type='xml'))\nDefine stream FooStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  This Kafka source configuration listens to the  kafka_topic  topic for the default partition because no  partition.no.list  is defined. Only one thread is created for the topic. The events are received in the XML format, mapped to a Siddhi event, and sent to a stream named  FooStream .", 
            "title": "kafka (Source)"
        }, 
        {
            "location": "/api/4.0.13/#kafkamultidc-source", 
            "text": "The Kafka Multi Data Center(DC) Source receives records from the same topic in brokers deployed in two different kafka cluster. It will filter out all duplicate messages and try to ensurethat the events are received in the correct order by using sequence numbers. events are received in format such as  text ,  XML  and  JSON .The Kafka Source will create the default partition  '0' for a given topic, if the topic is not already been created in the Kafka cluster.  Syntax  @source(type= kafkaMultiDC , bootstrap.servers= STRING , topic= STRING , partition.no= INT , optional.configuration= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         bootstrap.servers \n         This should contain the kafka server list which the kafka source should be listening to. This should be given in comma separated values. eg: 'localhost:9092,localhost:9093'  \n         \n         STRING \n         No \n         No \n     \n     \n         topic \n         The topic  which the source would be listening to. eg: 'topic_one'  \n         \n         STRING \n         No \n         No \n     \n     \n         partition.no \n         The partition number for the given topic \n         0 \n         INT \n         Yes \n         No \n     \n     \n         optional.configuration \n         This may contain all the other possible configurations which the consumer should be created with.eg: producer.type:async,batch.size:200 \n         null \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @App:name('TestExecutionPlan') \ndefine stream BarStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@source(type='kafkaMultiDC', topic='kafka_topic', bootstrap.servers='host1:9092,host1:9093', partition.no='1', @map(type='xml'))\nDefine stream FooStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  The following query will listen to 'kafka_topic' topic deployed in broker host1:9092 and host1:9093 with partition 1. There will be a thread created for each broker. The receiving xml events will be mapped to a siddhi event and will be send to the FooStream.", 
            "title": "kafkaMultiDC (Source)"
        }, 
        {
            "location": "/api/4.0.12/", 
            "text": "API Docs - v4.0.12\n\n\nSink\n\n\nkafka \n(Sink)\n\n\nA Kafka sink publishes events processed by WSO2 SP to a topic with a partition for a Kafka cluster. The events can be published in the \nTEXT\n \nXML\n or \nJSON\n format.\nIf the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic. The publishing topic and partition can be a dynamic value taken from the Siddhi event.\nTo configure a sink to use the Kafka transport, the \ntype\n parameter should have \nkafka\n as its value.\n\n\n\nSyntax\n\n\n@sink(type=\nkafka\n, bootstrap.servers=\nSTRING\n, topic=\nSTRING\n, partition.no=\nINT\n, sequence.id=\nSTRING\n, key=\nSTRING\n, optional.configuration=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nbootstrap.servers\n\n        \n This parameter specifies the list of Kafka servers to which the Kafka sink must publish events. This list should be provided as a set of comma separated values. e.g., \nlocalhost:9092,localhost:9093\n.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntopic\n\n        \nThe topic to which the Kafka sink needs to publish events. Only one topic must be specified.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npartition.no\n\n        \nThe partition number for the given topic. Only one partition ID can be defined. If no value is specified for this parameter, the Kafka sink publishes to the default partition of the topic (i.e., 0)\n\n        \n0\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsequence.id\n\n        \nA unique identifier to identify the messages published by this sink. This ID allows receivers to identify the sink that published a specific message.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nkey\n\n        \nThe key contains the values that are used to maintain ordering in a Kafka partition.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \noptional.configuration\n\n        \nThis parameter contains all the other possible configurations that the producer is created with. \ne.g., \nproducer.type:async,batch.size:200\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@App:name('TestExecutionPlan') \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@sink(\ntype='kafka',\ntopic='topic_with_partitions',\npartition.no='0',\nbootstrap.servers='localhost:9092',\n@map(type='xml'))\nDefine stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThis Kafka sink configuration publishes to 0th partition of the topic named \ntopic_with_partitions\n.\n\n\n\nEXAMPLE 2\n\n\n@App:name('TestExecutionPlan') \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@sink(\ntype='kafka',\ntopic='{{symbol}}',\npartition.no='{{volume}}',\nbootstrap.servers='localhost:9092',\n@map(type='xml'))\nDefine stream BarStream (symbol string, price float, volume long); \nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\nThis query publishes dynamic topic and partitions that are taken from the Siddhi event. The value for \npartition.no\n is taken from the \nvolume\n attribute, and the topic value is taken from the \nsymbol\n attribute.\n\n\n\nkafkaMultiDC \n(Sink)\n\n\nA Kafka sink publishes events processed by WSO2 SP to a topic with a partition for a Kafka cluster. The events can be published in the \nTEXT\n \nXML\n or \nJSON\n format.\nIf the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic. The publishing topic and partition can be a dynamic value taken from the Siddhi event.\nTo configure a sink to publish events via the Kafka transport, and using two Kafka brokers to publish events to the same topic, the \ntype\n parameter must have \nkafkaMultiDC\n as its value.\n\n\n\nSyntax\n\n\n@sink(type=\nkafkaMultiDC\n, bootstrap.servers=\nSTRING\n, topic=\nSTRING\n, sequence.id=\nSTRING\n, key=\nSTRING\n, partition.no=\nINT\n, optional.configuration=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nbootstrap.servers\n\n        \n This parameter specifies the list of Kafka servers to which the Kafka sink must publish events. This list should be provided as a set of comma separated values. There must be at least two servers in this list. e.g., \nlocalhost:9092,localhost:9093\n.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntopic\n\n        \nThe topic to which the Kafka sink needs to publish events. Only one topic must be specified.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nsequence.id\n\n        \nA unique identifier to identify the messages published by this sink. This ID allows receivers to identify the sink that published a specific message.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nkey\n\n        \nThe key contains the values that are used to maintain ordering in a Kafka partition.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \npartition.no\n\n        \nThe partition number for the given topic. Only one partition ID can be defined. If no value is specified for this parameter, the Kafka sink publishes to the default partition of the topic (i.e., 0)\n\n        \n0\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \noptional.configuration\n\n        \nThis parameter contains all the other possible configurations that the producer is created with. \ne.g., \nproducer.type:async,batch.size:200\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@App:name('TestExecutionPlan') \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@sink(type='kafkaMultiDC', topic='myTopic', partition.no='0',bootstrap.servers='host1:9092, host2:9092', @map(type='xml'))Define stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThis query publishes to the  default (i.e., 0th) partition of the brokers in two data centers \n\n\n\nSource\n\n\nkafka \n(Source)\n\n\nA Kafka source receives events to be processed by WSO2 SP from a topic with a partition for a Kafka cluster. The events received can be in the \nTEXT\n \nXML\n or \nJSON\n format.\nIf the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic.\n\n\n\nSyntax\n\n\n@source(type=\nkafka\n, bootstrap.servers=\nSTRING\n, topic.list=\nSTRING\n, group.id=\nSTRING\n, threading.option=\nSTRING\n, partition.no.list=\nSTRING\n, seq.enabled=\nBOOL\n, optional.configuration=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nbootstrap.servers\n\n        \nThis specifies the list of Kafka servers to which the Kafka source must listen. This list should beprovided as a set of comma-separated values.\ne.g., \nlocalhost:9092,localhost:9093\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntopic.list\n\n        \nThis specifies the list of topics to which the source must listen. This list should be provided as a set of comma-separated values.\ne.g., \ntopic_one,topic_two\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ngroup.id\n\n        \nThis is an ID to identify the Kafka source group. The group ID ensures that sources with the same topic and partition that are in the same group do not receive the same event.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nthreading.option\n\n        \n This specifies whether the Kafka source is to be run on a single thread, or in multiple threads based on a condition. Possible values are as follows:\nsingle.thread\n: To run the Kafka source on a single thread.\ntopic-wise\n: To use  separate thread per topic.\npartition.wise\n: To use a separate thread per partition.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npartition.no.list\n\n        \nThe partition number list for the given topic. This is provided as a list of comma-separated values. e.g., \n0,1,2,\n.\n\n        \n0\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nseq.enabled\n\n        \nIf this parameter is set to \ntrue\n, the sequence of the events received via the source is taken into account. Therefore, each event should contain a sequence number as an attribute value to indicate the sequence.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \noptional.configuration\n\n        \nThis parameter contains all the other possible configurations that the consumer is created with. \ne.g., \nssl.keystore.type:JKS,batch.size:200\n.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@App:name('TestExecutionPlan') \ndefine stream BarStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@source(\ntype='kafka', \ntopic.list='kafka_topic,kafka_topic2', \ngroup.id='test', \nthreading.option='partition.wise', \nbootstrap.servers='localhost:9092', \npartition.no.list='0,1', \n@map(type='xml'))\nDefine stream FooStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThis kafka source configuration listens to the \nkafka_topic\n and \nkafka_topic2\n topics with \n0\n and \n1\n partitions. A thread is created for each topic and partition combination. The events are received in the XML format, mapped to a Siddhi event, and sent to a stream named \nFooStream\n. \n\n\n\nEXAMPLE 2\n\n\n@App:name('TestExecutionPlan') \ndefine stream BarStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@source(\ntype='kafka', \ntopic.list='kafka_topic',\ngroup.id='test', \nthreading.option='single.thread',\nbootstrap.servers='localhost:9092',\n@map(type='xml'))\nDefine stream FooStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThis Kafka source configuration listens to the \nkafka_topic\n topic for the default partition because no \npartition.no.list\n is defined. Only one thread is created for the topic. The events are received in the XML format, mapped to a Siddhi event, and sent to a stream named \nFooStream\n.\n\n\n\nkafkaMultiDC \n(Source)\n\n\nThe Kafka Multi Data Center(DC) Source receives records from the same topic in brokers deployed in two different kafka cluster. It will filter out all duplicate messages and try to ensurethat the events are received in the correct order by using sequence numbers. events are received in format such as \ntext\n, \nXML\n and \nJSON\n.The Kafka Source will create the default partition  '0' for a given topic, if the topic is not already been created in the Kafka cluster.\n\n\n\nSyntax\n\n\n@source(type=\nkafkaMultiDC\n, bootstrap.servers=\nSTRING\n, topic=\nSTRING\n, partition.no=\nINT\n, optional.configuration=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nbootstrap.servers\n\n        \nThis should contain the kafka server list which the kafka source should be listening to. This should be given in comma separated values. eg: 'localhost:9092,localhost:9093' \n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntopic\n\n        \nThe topic  which the source would be listening to. eg: 'topic_one' \n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npartition.no\n\n        \nThe partition number for the given topic\n\n        \n0\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \noptional.configuration\n\n        \nThis may contain all the other possible configurations which the consumer should be created with.eg: producer.type:async,batch.size:200\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@App:name('TestExecutionPlan') \ndefine stream BarStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@source(type='kafkaMultiDC', topic='kafka_topic', bootstrap.servers='host1:9092,host1:9093', partition.no='1', @map(type='xml'))\nDefine stream FooStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThe following query will listen to 'kafka_topic' topic deployed in broker host1:9092 and host1:9093 with partition 1. There will be a thread created for each broker. The receiving xml events will be mapped to a siddhi event and will be send to the FooStream.", 
            "title": "4.0.12"
        }, 
        {
            "location": "/api/4.0.12/#api-docs-v4012", 
            "text": "", 
            "title": "API Docs - v4.0.12"
        }, 
        {
            "location": "/api/4.0.12/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/4.0.12/#kafka-sink", 
            "text": "A Kafka sink publishes events processed by WSO2 SP to a topic with a partition for a Kafka cluster. The events can be published in the  TEXT   XML  or  JSON  format. If the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic. The publishing topic and partition can be a dynamic value taken from the Siddhi event. To configure a sink to use the Kafka transport, the  type  parameter should have  kafka  as its value.  Syntax  @sink(type= kafka , bootstrap.servers= STRING , topic= STRING , partition.no= INT , sequence.id= STRING , key= STRING , optional.configuration= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         bootstrap.servers \n          This parameter specifies the list of Kafka servers to which the Kafka sink must publish events. This list should be provided as a set of comma separated values. e.g.,  localhost:9092,localhost:9093 . \n         \n         STRING \n         No \n         No \n     \n     \n         topic \n         The topic to which the Kafka sink needs to publish events. Only one topic must be specified. \n         \n         STRING \n         No \n         No \n     \n     \n         partition.no \n         The partition number for the given topic. Only one partition ID can be defined. If no value is specified for this parameter, the Kafka sink publishes to the default partition of the topic (i.e., 0) \n         0 \n         INT \n         Yes \n         No \n     \n     \n         sequence.id \n         A unique identifier to identify the messages published by this sink. This ID allows receivers to identify the sink that published a specific message. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         key \n         The key contains the values that are used to maintain ordering in a Kafka partition. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         optional.configuration \n         This parameter contains all the other possible configurations that the producer is created with.  e.g.,  producer.type:async,batch.size:200 \n         null \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @App:name('TestExecutionPlan') \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@sink(\ntype='kafka',\ntopic='topic_with_partitions',\npartition.no='0',\nbootstrap.servers='localhost:9092',\n@map(type='xml'))\nDefine stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  This Kafka sink configuration publishes to 0th partition of the topic named  topic_with_partitions .  EXAMPLE 2  @App:name('TestExecutionPlan') \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@sink(\ntype='kafka',\ntopic='{{symbol}}',\npartition.no='{{volume}}',\nbootstrap.servers='localhost:9092',\n@map(type='xml'))\nDefine stream BarStream (symbol string, price float, volume long); \nfrom FooStream select symbol, price, volume insert into BarStream;  This query publishes dynamic topic and partitions that are taken from the Siddhi event. The value for  partition.no  is taken from the  volume  attribute, and the topic value is taken from the  symbol  attribute.", 
            "title": "kafka (Sink)"
        }, 
        {
            "location": "/api/4.0.12/#kafkamultidc-sink", 
            "text": "A Kafka sink publishes events processed by WSO2 SP to a topic with a partition for a Kafka cluster. The events can be published in the  TEXT   XML  or  JSON  format. If the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic. The publishing topic and partition can be a dynamic value taken from the Siddhi event. To configure a sink to publish events via the Kafka transport, and using two Kafka brokers to publish events to the same topic, the  type  parameter must have  kafkaMultiDC  as its value.  Syntax  @sink(type= kafkaMultiDC , bootstrap.servers= STRING , topic= STRING , sequence.id= STRING , key= STRING , partition.no= INT , optional.configuration= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         bootstrap.servers \n          This parameter specifies the list of Kafka servers to which the Kafka sink must publish events. This list should be provided as a set of comma separated values. There must be at least two servers in this list. e.g.,  localhost:9092,localhost:9093 . \n         \n         STRING \n         No \n         No \n     \n     \n         topic \n         The topic to which the Kafka sink needs to publish events. Only one topic must be specified. \n         \n         STRING \n         No \n         No \n     \n     \n         sequence.id \n         A unique identifier to identify the messages published by this sink. This ID allows receivers to identify the sink that published a specific message. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         key \n         The key contains the values that are used to maintain ordering in a Kafka partition. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         partition.no \n         The partition number for the given topic. Only one partition ID can be defined. If no value is specified for this parameter, the Kafka sink publishes to the default partition of the topic (i.e., 0) \n         0 \n         INT \n         Yes \n         No \n     \n     \n         optional.configuration \n         This parameter contains all the other possible configurations that the producer is created with.  e.g.,  producer.type:async,batch.size:200 \n         null \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @App:name('TestExecutionPlan') \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@sink(type='kafkaMultiDC', topic='myTopic', partition.no='0',bootstrap.servers='host1:9092, host2:9092', @map(type='xml'))Define stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  This query publishes to the  default (i.e., 0th) partition of the brokers in two data centers", 
            "title": "kafkaMultiDC (Sink)"
        }, 
        {
            "location": "/api/4.0.12/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/4.0.12/#kafka-source", 
            "text": "A Kafka source receives events to be processed by WSO2 SP from a topic with a partition for a Kafka cluster. The events received can be in the  TEXT   XML  or  JSON  format. If the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic.  Syntax  @source(type= kafka , bootstrap.servers= STRING , topic.list= STRING , group.id= STRING , threading.option= STRING , partition.no.list= STRING , seq.enabled= BOOL , optional.configuration= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         bootstrap.servers \n         This specifies the list of Kafka servers to which the Kafka source must listen. This list should beprovided as a set of comma-separated values. e.g.,  localhost:9092,localhost:9093 \n         \n         STRING \n         No \n         No \n     \n     \n         topic.list \n         This specifies the list of topics to which the source must listen. This list should be provided as a set of comma-separated values. e.g.,  topic_one,topic_two \n         \n         STRING \n         No \n         No \n     \n     \n         group.id \n         This is an ID to identify the Kafka source group. The group ID ensures that sources with the same topic and partition that are in the same group do not receive the same event. \n         \n         STRING \n         No \n         No \n     \n     \n         threading.option \n          This specifies whether the Kafka source is to be run on a single thread, or in multiple threads based on a condition. Possible values are as follows: single.thread : To run the Kafka source on a single thread. topic-wise : To use  separate thread per topic. partition.wise : To use a separate thread per partition. \n         \n         STRING \n         No \n         No \n     \n     \n         partition.no.list \n         The partition number list for the given topic. This is provided as a list of comma-separated values. e.g.,  0,1,2, . \n         0 \n         STRING \n         Yes \n         No \n     \n     \n         seq.enabled \n         If this parameter is set to  true , the sequence of the events received via the source is taken into account. Therefore, each event should contain a sequence number as an attribute value to indicate the sequence. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         optional.configuration \n         This parameter contains all the other possible configurations that the consumer is created with.  e.g.,  ssl.keystore.type:JKS,batch.size:200 . \n         null \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @App:name('TestExecutionPlan') \ndefine stream BarStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@source(\ntype='kafka', \ntopic.list='kafka_topic,kafka_topic2', \ngroup.id='test', \nthreading.option='partition.wise', \nbootstrap.servers='localhost:9092', \npartition.no.list='0,1', \n@map(type='xml'))\nDefine stream FooStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  This kafka source configuration listens to the  kafka_topic  and  kafka_topic2  topics with  0  and  1  partitions. A thread is created for each topic and partition combination. The events are received in the XML format, mapped to a Siddhi event, and sent to a stream named  FooStream .   EXAMPLE 2  @App:name('TestExecutionPlan') \ndefine stream BarStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@source(\ntype='kafka', \ntopic.list='kafka_topic',\ngroup.id='test', \nthreading.option='single.thread',\nbootstrap.servers='localhost:9092',\n@map(type='xml'))\nDefine stream FooStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  This Kafka source configuration listens to the  kafka_topic  topic for the default partition because no  partition.no.list  is defined. Only one thread is created for the topic. The events are received in the XML format, mapped to a Siddhi event, and sent to a stream named  FooStream .", 
            "title": "kafka (Source)"
        }, 
        {
            "location": "/api/4.0.12/#kafkamultidc-source", 
            "text": "The Kafka Multi Data Center(DC) Source receives records from the same topic in brokers deployed in two different kafka cluster. It will filter out all duplicate messages and try to ensurethat the events are received in the correct order by using sequence numbers. events are received in format such as  text ,  XML  and  JSON .The Kafka Source will create the default partition  '0' for a given topic, if the topic is not already been created in the Kafka cluster.  Syntax  @source(type= kafkaMultiDC , bootstrap.servers= STRING , topic= STRING , partition.no= INT , optional.configuration= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         bootstrap.servers \n         This should contain the kafka server list which the kafka source should be listening to. This should be given in comma separated values. eg: 'localhost:9092,localhost:9093'  \n         \n         STRING \n         No \n         No \n     \n     \n         topic \n         The topic  which the source would be listening to. eg: 'topic_one'  \n         \n         STRING \n         No \n         No \n     \n     \n         partition.no \n         The partition number for the given topic \n         0 \n         INT \n         Yes \n         No \n     \n     \n         optional.configuration \n         This may contain all the other possible configurations which the consumer should be created with.eg: producer.type:async,batch.size:200 \n         null \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @App:name('TestExecutionPlan') \ndefine stream BarStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@source(type='kafkaMultiDC', topic='kafka_topic', bootstrap.servers='host1:9092,host1:9093', partition.no='1', @map(type='xml'))\nDefine stream FooStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  The following query will listen to 'kafka_topic' topic deployed in broker host1:9092 and host1:9093 with partition 1. There will be a thread created for each broker. The receiving xml events will be mapped to a siddhi event and will be send to the FooStream.", 
            "title": "kafkaMultiDC (Source)"
        }, 
        {
            "location": "/api/4.0.11/", 
            "text": "API Docs - v4.0.11\n\n\nSource\n\n\nkafkaMultiDC \n(Source)\n\n\nThe Kafka Multi Data Center(DC) Source receives records from the same topic in brokers deployed in two different kafka cluster. It will filter out all duplicate messages and try to ensurethat the events are received in the correct order by using sequence numbers. events are received in format such as \ntext\n, \nXML\n and \nJSON\n.The Kafka Source will create the default partition  '0' for a given topic, if the topic is not already been created in the Kafka cluster.\n\n\n\nSyntax\n\n\n@source(type=\nkafkaMultiDC\n, bootstrap.servers=\nSTRING\n, topic=\nSTRING\n, partition.no=\nINT\n, optional.configuration=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nbootstrap.servers\n\n        \nThis should contain the kafka server list which the kafka source should be listening to. This should be given in comma separated values. eg: 'localhost:9092,localhost:9093' \n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntopic\n\n        \nThe topic  which the source would be listening to. eg: 'topic_one' \n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npartition.no\n\n        \nThe partition number for the given topic\n\n        \n0\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \noptional.configuration\n\n        \nThis may contain all the other possible configurations which the consumer should be created with.eg: producer.type:async,batch.size:200\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@App:name('TestExecutionPlan') \ndefine stream BarStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@source(type='kafkaMultiDC', topic='kafka_topic', bootstrap.servers='host1:9092,host1:9093', partition.no='1', @map(type='xml'))\nDefine stream FooStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThe following query will listen to 'kafka_topic' topic deployed in broker host1:9092 and host1:9093 with partition 1. There will be a thread created for each broker. The receiving xml events will be mapped to a siddhi event and will be send to the FooStream.\n\n\n\nkafka \n(Source)\n\n\nA Kafka source receives events to be processed by WSO2 SP from a topic with a partition for a Kafka cluster. The events received can be in the \nTEXT\n \nXML\n or \nJSON\n format.\nIf the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic.\n\n\n\nSyntax\n\n\n@source(type=\nkafka\n, bootstrap.servers=\nSTRING\n, topic.list=\nSTRING\n, group.id=\nSTRING\n, threading.option=\nSTRING\n, partition.no.list=\nSTRING\n, seq.enabled=\nBOOL\n, optional.configuration=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nbootstrap.servers\n\n        \nThis specifies the list of Kafka servers to which the Kafka source must listen. This list should beprovided as a set of comma-separated values.\ne.g., \nlocalhost:9092,localhost:9093\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntopic.list\n\n        \nThis specifies the list of topics to which the source must listen. This list should be provided as a set of comma-separated values.\ne.g., \ntopic_one,topic_two\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ngroup.id\n\n        \nThis is an ID to identify the Kafka source group. The group ID ensures that sources with the same topic and partition that are in the same group do not receive the same event.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nthreading.option\n\n        \n This specifies whether the Kafka source is to be run on a single thread, or in multiple threads based on a condition. Possible values are as follows:\nsingle.thread\n: To run the Kafka source on a single thread.\ntopic-wise\n: To use  separate thread per topic.\npartition.wise\n: To use a separate thread per partition.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npartition.no.list\n\n        \nThe partition number list for the given topic. This is provided as a list of comma-separated values. e.g., \n0,1,2,\n.\n\n        \n0\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nseq.enabled\n\n        \nIf this parameter is set to \ntrue\n, the sequence of the events received via the source is taken into account. Therefore, each event should contain a sequence number as an attribute value to indicate the sequence.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \noptional.configuration\n\n        \nThis parameter contains all the other possible configurations that the consumer is created with. \ne.g., \nssl.keystore.type:JKS,batch.size:200\n.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@App:name('TestExecutionPlan') \ndefine stream BarStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@source(\ntype='kafka', \ntopic.list='kafka_topic,kafka_topic2', \ngroup.id='test', \nthreading.option='partition.wise', \nbootstrap.servers='localhost:9092', \npartition.no.list='0,1', \n@map(type='xml'))\nDefine stream FooStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThis kafka source configuration listens to the \nkafka_topic\n and \nkafka_topic2\n topics with \n0\n and \n1\n partitions. A thread is created for each topic and partition combination. The events are received in the XML format, mapped to a Siddhi event, and sent to a stream named \nFooStream\n. \n\n\n\nEXAMPLE 2\n\n\n@App:name('TestExecutionPlan') \ndefine stream BarStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@source(\ntype='kafka', \ntopic.list='kafka_topic',\ngroup.id='test', \nthreading.option='single.thread',\nbootstrap.servers='localhost:9092',\n@map(type='xml'))\nDefine stream FooStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThis Kafka source configuration listens to the \nkafka_topic\n topic for the default partition because no \npartition.no.list\n is defined. Only one thread is created for the topic. The events are received in the XML format, mapped to a Siddhi event, and sent to a stream named \nFooStream\n.\n\n\n\nSink\n\n\nkafkaMultiDC \n(Sink)\n\n\nA Kafka sink publishes events processed by WSO2 SP to a topic with a partition for a Kafka cluster. The events can be published in the \nTEXT\n \nXML\n or \nJSON\n format.\nIf the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic. The publishing topic and partition can be a dynamic value taken from the Siddhi event.\nTo configure a sink to publish events via the Kafka transport, and using two Kafka brokers to publish events to the same topic, the \ntype\n parameter must have \nkafkaMultiDC\n as its value.\n\n\n\nSyntax\n\n\n@sink(type=\nkafkaMultiDC\n, bootstrap.servers=\nSTRING\n, topic=\nSTRING\n, sequence.id=\nSTRING\n, key=\nSTRING\n, partition.no=\nINT\n, optional.configuration=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nbootstrap.servers\n\n        \n This parameter specifies the list of Kafka servers to which the Kafka sink must publish events. This list should be provided as a set of comma separated values. There must be at least two servers in this list. e.g., \nlocalhost:9092,localhost:9093\n.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntopic\n\n        \nThe topic to which the Kafka sink needs to publish events. Only one topic must be specified.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nsequence.id\n\n        \nA unique identifier to identify the messages published by this sink. This ID allows receivers to identify the sink that published a specific message.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nkey\n\n        \nThe key contains the values that are used to maintain ordering in a Kafka partition.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \npartition.no\n\n        \nThe partition number for the given topic. Only one partition ID can be defined. If no value is specified for this parameter, the Kafka sink publishes to the default partition of the topic (i.e., 0)\n\n        \n0\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \noptional.configuration\n\n        \nThis parameter contains all the other possible configurations that the producer is created with. \ne.g., \nproducer.type:async,batch.size:200\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@App:name('TestExecutionPlan') \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@sink(type='kafkaMultiDC', topic='myTopic', partition.no='0',bootstrap.servers='host1:9092, host2:9092', @map(type='xml'))Define stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThis query publishes to the  default (i.e., 0th) partition of the brokers in two data centers \n\n\n\nkafka \n(Sink)\n\n\nA Kafka sink publishes events processed by WSO2 SP to a topic with a partition for a Kafka cluster. The events can be published in the \nTEXT\n \nXML\n or \nJSON\n format.\nIf the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic. The publishing topic and partition can be a dynamic value taken from the Siddhi event.\nTo configure a sink to use the Kafka transport, the \ntype\n parameter should have \nkafka\n as its value.\n\n\n\nSyntax\n\n\n@sink(type=\nkafka\n, bootstrap.servers=\nSTRING\n, topic=\nSTRING\n, partition.no=\nINT\n, sequence.id=\nSTRING\n, key=\nSTRING\n, optional.configuration=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nbootstrap.servers\n\n        \n This parameter specifies the list of Kafka servers to which the Kafka sink must publish events. This list should be provided as a set of comma separated values. e.g., \nlocalhost:9092,localhost:9093\n.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntopic\n\n        \nThe topic to which the Kafka sink needs to publish events. Only one topic must be specified.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npartition.no\n\n        \nThe partition number for the given topic. Only one partition ID can be defined. If no value is specified for this parameter, the Kafka sink publishes to the default partition of the topic (i.e., 0)\n\n        \n0\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsequence.id\n\n        \nA unique identifier to identify the messages published by this sink. This ID allows receivers to identify the sink that published a specific message.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nkey\n\n        \nThe key contains the values that are used to maintain ordering in a Kafka partition.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \noptional.configuration\n\n        \nThis parameter contains all the other possible configurations that the producer is created with. \ne.g., \nproducer.type:async,batch.size:200\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@App:name('TestExecutionPlan') \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@sink(\ntype='kafka',\ntopic='topic_with_partitions',\npartition.no='0',\nbootstrap.servers='localhost:9092',\n@map(type='xml'))\nDefine stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThis Kafka sink configuration publishes to 0th partition of the topic named \ntopic_with_partitions\n.\n\n\n\nEXAMPLE 2\n\n\n@App:name('TestExecutionPlan') \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@sink(\ntype='kafka',\ntopic='{{symbol}}',\npartition.no='{{volume}}',\nbootstrap.servers='localhost:9092',\n@map(type='xml'))\nDefine stream BarStream (symbol string, price float, volume long); \nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\nThis query publishes dynamic topic and partitions that are taken from the Siddhi event. The value for \npartition.no\n is taken from the \nvolume\n attribute, and the topic value is taken from the \nsymbol\n attribute.", 
            "title": "4.0.11"
        }, 
        {
            "location": "/api/4.0.11/#api-docs-v4011", 
            "text": "", 
            "title": "API Docs - v4.0.11"
        }, 
        {
            "location": "/api/4.0.11/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/4.0.11/#kafkamultidc-source", 
            "text": "The Kafka Multi Data Center(DC) Source receives records from the same topic in brokers deployed in two different kafka cluster. It will filter out all duplicate messages and try to ensurethat the events are received in the correct order by using sequence numbers. events are received in format such as  text ,  XML  and  JSON .The Kafka Source will create the default partition  '0' for a given topic, if the topic is not already been created in the Kafka cluster.  Syntax  @source(type= kafkaMultiDC , bootstrap.servers= STRING , topic= STRING , partition.no= INT , optional.configuration= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         bootstrap.servers \n         This should contain the kafka server list which the kafka source should be listening to. This should be given in comma separated values. eg: 'localhost:9092,localhost:9093'  \n         \n         STRING \n         No \n         No \n     \n     \n         topic \n         The topic  which the source would be listening to. eg: 'topic_one'  \n         \n         STRING \n         No \n         No \n     \n     \n         partition.no \n         The partition number for the given topic \n         0 \n         INT \n         Yes \n         No \n     \n     \n         optional.configuration \n         This may contain all the other possible configurations which the consumer should be created with.eg: producer.type:async,batch.size:200 \n         null \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @App:name('TestExecutionPlan') \ndefine stream BarStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@source(type='kafkaMultiDC', topic='kafka_topic', bootstrap.servers='host1:9092,host1:9093', partition.no='1', @map(type='xml'))\nDefine stream FooStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  The following query will listen to 'kafka_topic' topic deployed in broker host1:9092 and host1:9093 with partition 1. There will be a thread created for each broker. The receiving xml events will be mapped to a siddhi event and will be send to the FooStream.", 
            "title": "kafkaMultiDC (Source)"
        }, 
        {
            "location": "/api/4.0.11/#kafka-source", 
            "text": "A Kafka source receives events to be processed by WSO2 SP from a topic with a partition for a Kafka cluster. The events received can be in the  TEXT   XML  or  JSON  format. If the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic.  Syntax  @source(type= kafka , bootstrap.servers= STRING , topic.list= STRING , group.id= STRING , threading.option= STRING , partition.no.list= STRING , seq.enabled= BOOL , optional.configuration= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         bootstrap.servers \n         This specifies the list of Kafka servers to which the Kafka source must listen. This list should beprovided as a set of comma-separated values. e.g.,  localhost:9092,localhost:9093 \n         \n         STRING \n         No \n         No \n     \n     \n         topic.list \n         This specifies the list of topics to which the source must listen. This list should be provided as a set of comma-separated values. e.g.,  topic_one,topic_two \n         \n         STRING \n         No \n         No \n     \n     \n         group.id \n         This is an ID to identify the Kafka source group. The group ID ensures that sources with the same topic and partition that are in the same group do not receive the same event. \n         \n         STRING \n         No \n         No \n     \n     \n         threading.option \n          This specifies whether the Kafka source is to be run on a single thread, or in multiple threads based on a condition. Possible values are as follows: single.thread : To run the Kafka source on a single thread. topic-wise : To use  separate thread per topic. partition.wise : To use a separate thread per partition. \n         \n         STRING \n         No \n         No \n     \n     \n         partition.no.list \n         The partition number list for the given topic. This is provided as a list of comma-separated values. e.g.,  0,1,2, . \n         0 \n         STRING \n         Yes \n         No \n     \n     \n         seq.enabled \n         If this parameter is set to  true , the sequence of the events received via the source is taken into account. Therefore, each event should contain a sequence number as an attribute value to indicate the sequence. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         optional.configuration \n         This parameter contains all the other possible configurations that the consumer is created with.  e.g.,  ssl.keystore.type:JKS,batch.size:200 . \n         null \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @App:name('TestExecutionPlan') \ndefine stream BarStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@source(\ntype='kafka', \ntopic.list='kafka_topic,kafka_topic2', \ngroup.id='test', \nthreading.option='partition.wise', \nbootstrap.servers='localhost:9092', \npartition.no.list='0,1', \n@map(type='xml'))\nDefine stream FooStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  This kafka source configuration listens to the  kafka_topic  and  kafka_topic2  topics with  0  and  1  partitions. A thread is created for each topic and partition combination. The events are received in the XML format, mapped to a Siddhi event, and sent to a stream named  FooStream .   EXAMPLE 2  @App:name('TestExecutionPlan') \ndefine stream BarStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@source(\ntype='kafka', \ntopic.list='kafka_topic',\ngroup.id='test', \nthreading.option='single.thread',\nbootstrap.servers='localhost:9092',\n@map(type='xml'))\nDefine stream FooStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  This Kafka source configuration listens to the  kafka_topic  topic for the default partition because no  partition.no.list  is defined. Only one thread is created for the topic. The events are received in the XML format, mapped to a Siddhi event, and sent to a stream named  FooStream .", 
            "title": "kafka (Source)"
        }, 
        {
            "location": "/api/4.0.11/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/4.0.11/#kafkamultidc-sink", 
            "text": "A Kafka sink publishes events processed by WSO2 SP to a topic with a partition for a Kafka cluster. The events can be published in the  TEXT   XML  or  JSON  format. If the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic. The publishing topic and partition can be a dynamic value taken from the Siddhi event. To configure a sink to publish events via the Kafka transport, and using two Kafka brokers to publish events to the same topic, the  type  parameter must have  kafkaMultiDC  as its value.  Syntax  @sink(type= kafkaMultiDC , bootstrap.servers= STRING , topic= STRING , sequence.id= STRING , key= STRING , partition.no= INT , optional.configuration= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         bootstrap.servers \n          This parameter specifies the list of Kafka servers to which the Kafka sink must publish events. This list should be provided as a set of comma separated values. There must be at least two servers in this list. e.g.,  localhost:9092,localhost:9093 . \n         \n         STRING \n         No \n         No \n     \n     \n         topic \n         The topic to which the Kafka sink needs to publish events. Only one topic must be specified. \n         \n         STRING \n         No \n         No \n     \n     \n         sequence.id \n         A unique identifier to identify the messages published by this sink. This ID allows receivers to identify the sink that published a specific message. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         key \n         The key contains the values that are used to maintain ordering in a Kafka partition. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         partition.no \n         The partition number for the given topic. Only one partition ID can be defined. If no value is specified for this parameter, the Kafka sink publishes to the default partition of the topic (i.e., 0) \n         0 \n         INT \n         Yes \n         No \n     \n     \n         optional.configuration \n         This parameter contains all the other possible configurations that the producer is created with.  e.g.,  producer.type:async,batch.size:200 \n         null \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @App:name('TestExecutionPlan') \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@sink(type='kafkaMultiDC', topic='myTopic', partition.no='0',bootstrap.servers='host1:9092, host2:9092', @map(type='xml'))Define stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  This query publishes to the  default (i.e., 0th) partition of the brokers in two data centers", 
            "title": "kafkaMultiDC (Sink)"
        }, 
        {
            "location": "/api/4.0.11/#kafka-sink", 
            "text": "A Kafka sink publishes events processed by WSO2 SP to a topic with a partition for a Kafka cluster. The events can be published in the  TEXT   XML  or  JSON  format. If the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic. The publishing topic and partition can be a dynamic value taken from the Siddhi event. To configure a sink to use the Kafka transport, the  type  parameter should have  kafka  as its value.  Syntax  @sink(type= kafka , bootstrap.servers= STRING , topic= STRING , partition.no= INT , sequence.id= STRING , key= STRING , optional.configuration= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         bootstrap.servers \n          This parameter specifies the list of Kafka servers to which the Kafka sink must publish events. This list should be provided as a set of comma separated values. e.g.,  localhost:9092,localhost:9093 . \n         \n         STRING \n         No \n         No \n     \n     \n         topic \n         The topic to which the Kafka sink needs to publish events. Only one topic must be specified. \n         \n         STRING \n         No \n         No \n     \n     \n         partition.no \n         The partition number for the given topic. Only one partition ID can be defined. If no value is specified for this parameter, the Kafka sink publishes to the default partition of the topic (i.e., 0) \n         0 \n         INT \n         Yes \n         No \n     \n     \n         sequence.id \n         A unique identifier to identify the messages published by this sink. This ID allows receivers to identify the sink that published a specific message. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         key \n         The key contains the values that are used to maintain ordering in a Kafka partition. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         optional.configuration \n         This parameter contains all the other possible configurations that the producer is created with.  e.g.,  producer.type:async,batch.size:200 \n         null \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @App:name('TestExecutionPlan') \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@sink(\ntype='kafka',\ntopic='topic_with_partitions',\npartition.no='0',\nbootstrap.servers='localhost:9092',\n@map(type='xml'))\nDefine stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  This Kafka sink configuration publishes to 0th partition of the topic named  topic_with_partitions .  EXAMPLE 2  @App:name('TestExecutionPlan') \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@sink(\ntype='kafka',\ntopic='{{symbol}}',\npartition.no='{{volume}}',\nbootstrap.servers='localhost:9092',\n@map(type='xml'))\nDefine stream BarStream (symbol string, price float, volume long); \nfrom FooStream select symbol, price, volume insert into BarStream;  This query publishes dynamic topic and partitions that are taken from the Siddhi event. The value for  partition.no  is taken from the  volume  attribute, and the topic value is taken from the  symbol  attribute.", 
            "title": "kafka (Sink)"
        }, 
        {
            "location": "/api/4.0.10/", 
            "text": "API Docs - v4.0.10\n\n\nSource\n\n\nkafkaMultiDC \n(Source)\n\n\nThe Kafka Multi Data Center(DC) Source receives records from the same topic in brokers deployed in two different kafka cluster. It will filter out all duplicate messages and try to ensurethat the events are received in the correct order by using sequence numbers. events are received in format such as \ntext\n, \nXML\n and \nJSON\n.The Kafka Source will create the default partition  '0' for a given topic, if the topic is not already been created in the Kafka cluster.\n\n\n\nSyntax\n\n\n@source(type=\nkafkaMultiDC\n, bootstrap.servers=\nSTRING\n, topic=\nSTRING\n, partition.no=\nSTRING\n, optional.configuration=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nbootstrap.servers\n\n        \nThis should contain the kafka server list which the kafka source should be listening to. This should be given in comma separated values. eg: 'localhost:9092,localhost:9093' \n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntopic\n\n        \nThe topic  which the source would be listening to. eg: 'topic_one' \n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npartition.no\n\n        \nThe partition number for the given topic\n\n        \n0\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \noptional.configuration\n\n        \nThis may contain all the other possible configurations which the consumer should be created with.eg: producer.type:async,batch.size:200\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@App:name('TestExecutionPlan') \ndefine stream BarStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@source(type='kafkaMultiDC', topic='kafka_topic', bootstrap.servers='host1:9092,host1:9093', partition.no='1', @map(type='xml'))\nDefine stream FooStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThe following query will listen to 'kafka_topic' topic deployed in broker host1:9092 and host1:9093 with partition 1. There will be a thread created for each broker. The receiving xml events will be mapped to a siddhi event and will be send to the FooStream.\n\n\n\nkafka \n(Source)\n\n\nA Kafka source receives events to be processed by WSO2 SP from a topic with a partition for a Kafka cluster. The events received can be in the \nTEXT\n \nXML\n or \nJSON\n format.\nIf the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic.\n\n\n\nSyntax\n\n\n@source(type=\nkafka\n, bootstrap.servers=\nSTRING\n, topic.list=\nSTRING\n, group.id=\nSTRING\n, threading.option=\nSTRING\n, partition.no.list=\nSTRING\n, seq.enabled=\nBOOL\n, optional.configuration=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nbootstrap.servers\n\n        \nThis specifies the list of Kafka servers to which the Kafka source must listen. This list should beprovided as a set of comma-separated values.\ne.g., \nlocalhost:9092,localhost:9093\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntopic.list\n\n        \nThis specifies the list of topics to which the source must listen. This list should be provided as a set of comma-separated values.\ne.g., \ntopic_one,topic_two\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ngroup.id\n\n        \nThis is an ID to identify the Kafka source group. The group ID ensures that sources with the same topic and partition that are in the same group do not receive the same event.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nthreading.option\n\n        \n This specifies whether the Kafka source is to be run on a single thread, or in multiple threads based on a condition. Possible values are as follows:\nsingle.thread\n: To run the Kafka source on a single thread.\ntopic-wise\n: To use  separate thread per topic.\npartition.wise\n: To use a separate thread per partition.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npartition.no.list\n\n        \nThe partition number list for the given topic. This is provided as a list of comma-separated values. e.g., \n0,1,2,\n.\n\n        \n0\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nseq.enabled\n\n        \nIf this parameter is set to \ntrue\n, the sequence of the events received via the source is taken into account. Therefore, each event should contain a sequence number as an attribute value to indicate the sequence.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \noptional.configuration\n\n        \nThis parameter contains all the other possible configurations that the consumer is created with. \ne.g., \nssl.keystore.type:JKS,batch.size:200\n.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@App:name('TestExecutionPlan') \ndefine stream BarStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@source(\ntype='kafka', \ntopic.list='kafka_topic,kafka_topic2', \ngroup.id='test', \nthreading.option='partition.wise', \nbootstrap.servers='localhost:9092', \npartition.no.list='0,1', \n@map(type='xml'))\nDefine stream FooStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThis kafka source configuration listens to the \nkafka_topic\n and \nkafka_topic2\n topics with \n0\n and \n1\n partitions. A thread is created for each topic and partition combination. The events are received in the XML format, mapped to a Siddhi event, and sent to a stream named \nFooStream\n. \n\n\n\nEXAMPLE 2\n\n\n@App:name('TestExecutionPlan') \ndefine stream BarStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@source(\ntype='kafka', \ntopic.list='kafka_topic',\ngroup.id='test', \nthreading.option='single.thread',\nbootstrap.servers='localhost:9092',\n@map(type='xml'))\nDefine stream FooStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThis Kafka source configuration listens to the \nkafka_topic\n topic for the default partition because no \npartition.no.list\n is defined. Only one thread is created for the topic. The events are received in the XML format, mapped to a Siddhi event, and sent to a stream named \nFooStream\n.\n\n\n\nSink\n\n\nkafkaMultiDC \n(Sink)\n\n\nA Kafka sink publishes events processed by WSO2 SP to a topic with a partition for a Kafka cluster. The events can be published in the \nTEXT\n \nXML\n or \nJSON\n format.\nIf the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic. The publishing topic and partition can be a dynamic value taken from the Siddhi event.\nTo configure a sink to publish events via the Kafka transport, and using two Kafka brokers to publish events to the same topic, the \ntype\n parameter must have \nkafkaMultiDC\n as its value.\n\n\n\nSyntax\n\n\n@sink(type=\nkafkaMultiDC\n, bootstrap.servers=\nSTRING\n, topic=\nSTRING\n, sequence.id=\nSTRING\n, key=\nSTRING\n, partition.no=\nINT\n, optional.configuration=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nbootstrap.servers\n\n        \n This parameter specifies the list of Kafka servers to which the Kafka sink must publish events. This list should be provided as a set of comma separated values. There must be at least two servers in this list. e.g., \nlocalhost:9092,localhost:9093\n.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntopic\n\n        \nThe topic to which the Kafka sink needs to publish events. Only one topic must be specified.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nsequence.id\n\n        \nA unique identifier to identify the messages published by this sink. This ID allows receivers to identify the sink that published a specific message.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nkey\n\n        \nThe key contains the values that are used to maintain ordering in a Kafka partition.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \npartition.no\n\n        \nThe partition number for the given topic. Only one partition ID can be defined. If no value is specified for this parameter, the Kafka sink publishes to the default partition of the topic (i.e., 0)\n\n        \n0\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \noptional.configuration\n\n        \nThis parameter contains all the other possible configurations that the producer is created with. \ne.g., \nproducer.type:async,batch.size:200\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@App:name('TestExecutionPlan') \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@sink(type='kafkaMultiDC', topic='myTopic', partition.no='0',bootstrap.servers='host1:9092, host2:9092', @map(type='xml'))Define stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThis query publishes to the  default (i.e., 0th) partition of the brokers in two data centers \n\n\n\nkafka \n(Sink)\n\n\nA Kafka sink publishes events processed by WSO2 SP to a topic with a partition for a Kafka cluster. The events can be published in the \nTEXT\n \nXML\n or \nJSON\n format.\nIf the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic. The publishing topic and partition can be a dynamic value taken from the Siddhi event.\nTo configure a sink to use the Kafka transport, the \ntype\n parameter should have \nkafka\n as its value.\n\n\n\nSyntax\n\n\n@sink(type=\nkafka\n, bootstrap.servers=\nSTRING\n, topic=\nSTRING\n, partition.no=\nINT\n, sequence.id=\nSTRING\n, key=\nSTRING\n, optional.configuration=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nbootstrap.servers\n\n        \n This parameter specifies the list of Kafka servers to which the Kafka sink must publish events. This list should be provided as a set of comma separated values. e.g., \nlocalhost:9092,localhost:9093\n.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntopic\n\n        \nThe topic to which the Kafka sink needs to publish events. Only one topic must be specified.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npartition.no\n\n        \nThe partition number for the given topic. Only one partition ID can be defined. If no value is specified for this parameter, the Kafka sink publishes to the default partition of the topic (i.e., 0)\n\n        \n0\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsequence.id\n\n        \nA unique identifier to identify the messages published by this sink. This ID allows receivers to identify the sink that published a specific message.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nkey\n\n        \nThe key contains the values that are used to maintain ordering in a Kafka partition.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \noptional.configuration\n\n        \nThis parameter contains all the other possible configurations that the producer is created with. \ne.g., \nproducer.type:async,batch.size:200\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@App:name('TestExecutionPlan') \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@sink(\ntype='kafka',\ntopic='topic_with_partitions',\npartition.no='0',\nbootstrap.servers='localhost:9092',\n@map(type='xml'))\nDefine stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThis Kafka sink configuration publishes to 0th partition of the topic named \ntopic_with_partitions\n.\n\n\n\nEXAMPLE 2\n\n\n@App:name('TestExecutionPlan') \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@sink(\ntype='kafka',\ntopic='{{symbol}}',\npartition.no='{{volume}}',\nbootstrap.servers='localhost:9092',\n@map(type='xml'))\nDefine stream BarStream (symbol string, price float, volume long); \nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\nThis query publishes dynamic topic and partitions that are taken from the Siddhi event. The value for \npartition.no\n is taken from the \nvolume\n attribute, and the topic value is taken from the \nsymbol\n attribute.", 
            "title": "4.0.10"
        }, 
        {
            "location": "/api/4.0.10/#api-docs-v4010", 
            "text": "", 
            "title": "API Docs - v4.0.10"
        }, 
        {
            "location": "/api/4.0.10/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/4.0.10/#kafkamultidc-source", 
            "text": "The Kafka Multi Data Center(DC) Source receives records from the same topic in brokers deployed in two different kafka cluster. It will filter out all duplicate messages and try to ensurethat the events are received in the correct order by using sequence numbers. events are received in format such as  text ,  XML  and  JSON .The Kafka Source will create the default partition  '0' for a given topic, if the topic is not already been created in the Kafka cluster.  Syntax  @source(type= kafkaMultiDC , bootstrap.servers= STRING , topic= STRING , partition.no= STRING , optional.configuration= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         bootstrap.servers \n         This should contain the kafka server list which the kafka source should be listening to. This should be given in comma separated values. eg: 'localhost:9092,localhost:9093'  \n         \n         STRING \n         No \n         No \n     \n     \n         topic \n         The topic  which the source would be listening to. eg: 'topic_one'  \n         \n         STRING \n         No \n         No \n     \n     \n         partition.no \n         The partition number for the given topic \n         0 \n         STRING \n         Yes \n         No \n     \n     \n         optional.configuration \n         This may contain all the other possible configurations which the consumer should be created with.eg: producer.type:async,batch.size:200 \n         null \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @App:name('TestExecutionPlan') \ndefine stream BarStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@source(type='kafkaMultiDC', topic='kafka_topic', bootstrap.servers='host1:9092,host1:9093', partition.no='1', @map(type='xml'))\nDefine stream FooStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  The following query will listen to 'kafka_topic' topic deployed in broker host1:9092 and host1:9093 with partition 1. There will be a thread created for each broker. The receiving xml events will be mapped to a siddhi event and will be send to the FooStream.", 
            "title": "kafkaMultiDC (Source)"
        }, 
        {
            "location": "/api/4.0.10/#kafka-source", 
            "text": "A Kafka source receives events to be processed by WSO2 SP from a topic with a partition for a Kafka cluster. The events received can be in the  TEXT   XML  or  JSON  format. If the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic.  Syntax  @source(type= kafka , bootstrap.servers= STRING , topic.list= STRING , group.id= STRING , threading.option= STRING , partition.no.list= STRING , seq.enabled= BOOL , optional.configuration= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         bootstrap.servers \n         This specifies the list of Kafka servers to which the Kafka source must listen. This list should beprovided as a set of comma-separated values. e.g.,  localhost:9092,localhost:9093 \n         \n         STRING \n         No \n         No \n     \n     \n         topic.list \n         This specifies the list of topics to which the source must listen. This list should be provided as a set of comma-separated values. e.g.,  topic_one,topic_two \n         \n         STRING \n         No \n         No \n     \n     \n         group.id \n         This is an ID to identify the Kafka source group. The group ID ensures that sources with the same topic and partition that are in the same group do not receive the same event. \n         \n         STRING \n         No \n         No \n     \n     \n         threading.option \n          This specifies whether the Kafka source is to be run on a single thread, or in multiple threads based on a condition. Possible values are as follows: single.thread : To run the Kafka source on a single thread. topic-wise : To use  separate thread per topic. partition.wise : To use a separate thread per partition. \n         \n         STRING \n         No \n         No \n     \n     \n         partition.no.list \n         The partition number list for the given topic. This is provided as a list of comma-separated values. e.g.,  0,1,2, . \n         0 \n         STRING \n         Yes \n         No \n     \n     \n         seq.enabled \n         If this parameter is set to  true , the sequence of the events received via the source is taken into account. Therefore, each event should contain a sequence number as an attribute value to indicate the sequence. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         optional.configuration \n         This parameter contains all the other possible configurations that the consumer is created with.  e.g.,  ssl.keystore.type:JKS,batch.size:200 . \n         null \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @App:name('TestExecutionPlan') \ndefine stream BarStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@source(\ntype='kafka', \ntopic.list='kafka_topic,kafka_topic2', \ngroup.id='test', \nthreading.option='partition.wise', \nbootstrap.servers='localhost:9092', \npartition.no.list='0,1', \n@map(type='xml'))\nDefine stream FooStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  This kafka source configuration listens to the  kafka_topic  and  kafka_topic2  topics with  0  and  1  partitions. A thread is created for each topic and partition combination. The events are received in the XML format, mapped to a Siddhi event, and sent to a stream named  FooStream .   EXAMPLE 2  @App:name('TestExecutionPlan') \ndefine stream BarStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@source(\ntype='kafka', \ntopic.list='kafka_topic',\ngroup.id='test', \nthreading.option='single.thread',\nbootstrap.servers='localhost:9092',\n@map(type='xml'))\nDefine stream FooStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  This Kafka source configuration listens to the  kafka_topic  topic for the default partition because no  partition.no.list  is defined. Only one thread is created for the topic. The events are received in the XML format, mapped to a Siddhi event, and sent to a stream named  FooStream .", 
            "title": "kafka (Source)"
        }, 
        {
            "location": "/api/4.0.10/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/4.0.10/#kafkamultidc-sink", 
            "text": "A Kafka sink publishes events processed by WSO2 SP to a topic with a partition for a Kafka cluster. The events can be published in the  TEXT   XML  or  JSON  format. If the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic. The publishing topic and partition can be a dynamic value taken from the Siddhi event. To configure a sink to publish events via the Kafka transport, and using two Kafka brokers to publish events to the same topic, the  type  parameter must have  kafkaMultiDC  as its value.  Syntax  @sink(type= kafkaMultiDC , bootstrap.servers= STRING , topic= STRING , sequence.id= STRING , key= STRING , partition.no= INT , optional.configuration= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         bootstrap.servers \n          This parameter specifies the list of Kafka servers to which the Kafka sink must publish events. This list should be provided as a set of comma separated values. There must be at least two servers in this list. e.g.,  localhost:9092,localhost:9093 . \n         \n         STRING \n         No \n         No \n     \n     \n         topic \n         The topic to which the Kafka sink needs to publish events. Only one topic must be specified. \n         \n         STRING \n         No \n         No \n     \n     \n         sequence.id \n         A unique identifier to identify the messages published by this sink. This ID allows receivers to identify the sink that published a specific message. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         key \n         The key contains the values that are used to maintain ordering in a Kafka partition. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         partition.no \n         The partition number for the given topic. Only one partition ID can be defined. If no value is specified for this parameter, the Kafka sink publishes to the default partition of the topic (i.e., 0) \n         0 \n         INT \n         Yes \n         No \n     \n     \n         optional.configuration \n         This parameter contains all the other possible configurations that the producer is created with.  e.g.,  producer.type:async,batch.size:200 \n         null \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @App:name('TestExecutionPlan') \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@sink(type='kafkaMultiDC', topic='myTopic', partition.no='0',bootstrap.servers='host1:9092, host2:9092', @map(type='xml'))Define stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  This query publishes to the  default (i.e., 0th) partition of the brokers in two data centers", 
            "title": "kafkaMultiDC (Sink)"
        }, 
        {
            "location": "/api/4.0.10/#kafka-sink", 
            "text": "A Kafka sink publishes events processed by WSO2 SP to a topic with a partition for a Kafka cluster. The events can be published in the  TEXT   XML  or  JSON  format. If the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic. The publishing topic and partition can be a dynamic value taken from the Siddhi event. To configure a sink to use the Kafka transport, the  type  parameter should have  kafka  as its value.  Syntax  @sink(type= kafka , bootstrap.servers= STRING , topic= STRING , partition.no= INT , sequence.id= STRING , key= STRING , optional.configuration= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         bootstrap.servers \n          This parameter specifies the list of Kafka servers to which the Kafka sink must publish events. This list should be provided as a set of comma separated values. e.g.,  localhost:9092,localhost:9093 . \n         \n         STRING \n         No \n         No \n     \n     \n         topic \n         The topic to which the Kafka sink needs to publish events. Only one topic must be specified. \n         \n         STRING \n         No \n         No \n     \n     \n         partition.no \n         The partition number for the given topic. Only one partition ID can be defined. If no value is specified for this parameter, the Kafka sink publishes to the default partition of the topic (i.e., 0) \n         0 \n         INT \n         Yes \n         No \n     \n     \n         sequence.id \n         A unique identifier to identify the messages published by this sink. This ID allows receivers to identify the sink that published a specific message. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         key \n         The key contains the values that are used to maintain ordering in a Kafka partition. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         optional.configuration \n         This parameter contains all the other possible configurations that the producer is created with.  e.g.,  producer.type:async,batch.size:200 \n         null \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @App:name('TestExecutionPlan') \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@sink(\ntype='kafka',\ntopic='topic_with_partitions',\npartition.no='0',\nbootstrap.servers='localhost:9092',\n@map(type='xml'))\nDefine stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  This Kafka sink configuration publishes to 0th partition of the topic named  topic_with_partitions .  EXAMPLE 2  @App:name('TestExecutionPlan') \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@sink(\ntype='kafka',\ntopic='{{symbol}}',\npartition.no='{{volume}}',\nbootstrap.servers='localhost:9092',\n@map(type='xml'))\nDefine stream BarStream (symbol string, price float, volume long); \nfrom FooStream select symbol, price, volume insert into BarStream;  This query publishes dynamic topic and partitions that are taken from the Siddhi event. The value for  partition.no  is taken from the  volume  attribute, and the topic value is taken from the  symbol  attribute.", 
            "title": "kafka (Sink)"
        }, 
        {
            "location": "/api/4.0.9/", 
            "text": "API Docs - v4.0.9\n\n\nSink\n\n\nkafkaMultiDC \n(Sink)\n\n\nA Kafka sink publishes events processed by WSO2 SP to a topic with a partition for a Kafka cluster. The events can be published in the \nTEXT\n \nXML\n or \nJSON\n format.\nIf the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic. The publishing topic and partition can be a dynamic value taken from the Siddhi event.\nTo configure a sink to publish events via the Kafka transport, and using two Kafka brokers to publish events to the same topic, the \ntype\n parameter must have \nkafkaMultiDC\n as its value.\n\n\n\nSyntax\n\n\n@sink(type=\nkafkaMultiDC\n, bootstrap.servers=\nSTRING\n, topic=\nSTRING\n, sequence.id=\nSTRING\n, key=\nSTRING\n, partition.no=\nINT\n, optional.configuration=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nbootstrap.servers\n\n        \n This parameter specifies the list of Kafka servers to which the Kafka sink must publish events. This list should be provided as a set of comma separated values. There must be at least two servers in this list. e.g., \nlocalhost:9092,localhost:9093\n.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntopic\n\n        \nThe topic to which the Kafka sink needs to publish events. Only one topic must be specified.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nsequence.id\n\n        \nA unique identifier to identify the messages published by this sink. This ID allows receivers to identify the sink that published a specific message.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nkey\n\n        \nThe key contains the values that are used to maintain ordering in a Kafka partition.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \npartition.no\n\n        \nThe partition number for the given topic. Only one partition ID can be defined. If no value is specified for this parameter, the Kafka sink publishes to the default partition of the topic (i.e., 0)\n\n        \n0\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \noptional.configuration\n\n        \nThis parameter contains all the other possible configurations that the producer is created with. \ne.g., \nproducer.type:async,batch.size:200\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@App:name('TestExecutionPlan') \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@sink(type='kafkaMultiDC', topic='myTopic', partition='0',bootstrap.servers='host1:9092, host2:9092', @map(type='xml'))Define stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThis query publishes to the  default (i.e., 0th) partition of the brokers in two data centers \n\n\n\nkafka \n(Sink)\n\n\nA Kafka sink publishes events processed by WSO2 SP to a topic with a partition for a Kafka cluster. The events can be published in the \nTEXT\n \nXML\n or \nJSON\n format.\nIf the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic. The publishing topic and partition can be a dynamic value taken from the Siddhi event.\nTo configure a sink to use the Kafka transport, the \ntype\n parameter should have \nkafka\n as its value.\n\n\n\nSyntax\n\n\n@sink(type=\nkafka\n, bootstrap.servers=\nSTRING\n, topic=\nSTRING\n, partition.no=\nINT\n, sequence.id=\nSTRING\n, key=\nSTRING\n, optional.configuration=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nbootstrap.servers\n\n        \n This parameter specifies the list of Kafka servers to which the Kafka sink must publish events. This list should be provided as a set of comma separated values. e.g., \nlocalhost:9092,localhost:9093\n.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntopic\n\n        \nThe topic to which the Kafka sink needs to publish events. Only one topic must be specified.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npartition.no\n\n        \nThe partition number for the given topic. Only one partition ID can be defined. If no value is specified for this parameter, the Kafka sink publishes to the default partition of the topic (i.e., 0)\n\n        \n0\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsequence.id\n\n        \nA unique identifier to identify the messages published by this sink. This ID allows receivers to identify the sink that published a specific message.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nkey\n\n        \nThe key contains the values that are used to maintain ordering in a Kafka partition.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \noptional.configuration\n\n        \nThis parameter contains all the other possible configurations that the producer is created with. \ne.g., \nproducer.type:async,batch.size:200\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@App:name('TestExecutionPlan') \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@sink(\ntype='kafka',\ntopic='topic_with_partitions',\npartition.no='0',\nbootstrap.servers='localhost:9092',\n@map(type='xml'))\nDefine stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThis Kafka sink configuration publishes to 0th partition of the topic named \ntopic_with_partitions\n.\n\n\n\nEXAMPLE 2\n\n\n@App:name('TestExecutionPlan') \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@sink(\ntype='kafka',\ntopic='{{symbol}}',\npartition.no='{{volume}}',\nbootstrap.servers='localhost:9092',\n@map(type='xml'))\nDefine stream BarStream (symbol string, price float, volume long); \nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\nThis query publishes dynamic topic and partitions that are taken from the Siddhi event. The value for \npartition.no\n is taken from the \nvolume\n attribute, and the topic value is taken from the \nsymbol\n attribute.\n\n\n\nSource\n\n\nkafka \n(Source)\n\n\nA Kafka source receives events to be processed by WSO2 SP from a topic with a partition for a Kafka cluster. The events received can be in the \nTEXT\n \nXML\n or \nJSON\n format.\nIf the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic.\n\n\n\nSyntax\n\n\n@source(type=\nkafka\n, bootstrap.servers=\nSTRING\n, topic.list=\nSTRING\n, group.id=\nSTRING\n, threading.option=\nSTRING\n, partition.no.list=\nSTRING\n, seq.enabled=\nBOOL\n, optional.configuration=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nbootstrap.servers\n\n        \nThis specifies the list of Kafka servers to which the Kafka source must listen. This list should beprovided as a set of comma-separated values.\ne.g., \nlocalhost:9092,localhost:9093\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntopic.list\n\n        \nThis specifies the list of topics to which the source must listen. This list should be provided as a set of comma-separated values.\ne.g., \ntopic_one,topic_two\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ngroup.id\n\n        \nThis is an ID to identify the Kafka source group. The group ID ensures that sources with the same topic and partition that are in the same group do not receive the same event.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nthreading.option\n\n        \n This specifies whether the Kafka source is to be run on a single thread, or in multiple threads based on a condition. Possible values are as follows:\nsingle.thread\n: To run the Kafka source on a single thread.\ntopic-wise\n: To use  separate thread per topic.\npartition.wise\n: To use a separate thread per partition.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npartition.no.list\n\n        \nThe partition number list for the given topic. This is provided as a list of comma-separated values. e.g., \n0,1,2,\n.\n\n        \n0\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nseq.enabled\n\n        \nIf this parameter is set to \ntrue\n, the sequence of the events received via the source is taken into account. Therefore, each event should contain a sequence number as an attribute value to indicate the sequence.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \noptional.configuration\n\n        \nThis parameter contains all the other possible configurations that the consumer is created with. \ne.g., \nssl.keystore.type:JKS,batch.size:200\n.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@App:name('TestExecutionPlan') \ndefine stream BarStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@source(\ntype='kafka', \ntopic.list='kafka_topic,kafka_topic2', \ngroup.id='test', \nthreading.option='partition.wise', \nbootstrap.servers='localhost:9092', \npartition.no.list='0,1', \n@map(type='xml'))\nDefine stream FooStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThis kafka source configuration listens to the \nkafka_topic\n and \nkafka_topic2\n topics with \n0\n and \n1\n partitions. A thread is created for each topic and partition combination. The events are received in the XML format, mapped to a Siddhi event, and sent to a stream named \nFooStream\n. \n\n\n\nEXAMPLE 2\n\n\n@App:name('TestExecutionPlan') \ndefine stream BarStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@source(\ntype='kafka', \ntopic.list='kafka_topic',\ngroup.id='test', \nthreading.option='single.thread',\nbootstrap.servers='localhost:9092',\n@map(type='xml'))\nDefine stream FooStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThis Kafka source configuration listens to the \nkafka_topic\n topic for the default partition because no \npartition.no.list\n is defined. Only one thread is created for the topic. The events are received in the XML format, mapped to a Siddhi event, and sent to a stream named \nFooStream\n.", 
            "title": "4.0.9"
        }, 
        {
            "location": "/api/4.0.9/#api-docs-v409", 
            "text": "", 
            "title": "API Docs - v4.0.9"
        }, 
        {
            "location": "/api/4.0.9/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/4.0.9/#kafkamultidc-sink", 
            "text": "A Kafka sink publishes events processed by WSO2 SP to a topic with a partition for a Kafka cluster. The events can be published in the  TEXT   XML  or  JSON  format. If the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic. The publishing topic and partition can be a dynamic value taken from the Siddhi event. To configure a sink to publish events via the Kafka transport, and using two Kafka brokers to publish events to the same topic, the  type  parameter must have  kafkaMultiDC  as its value.  Syntax  @sink(type= kafkaMultiDC , bootstrap.servers= STRING , topic= STRING , sequence.id= STRING , key= STRING , partition.no= INT , optional.configuration= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         bootstrap.servers \n          This parameter specifies the list of Kafka servers to which the Kafka sink must publish events. This list should be provided as a set of comma separated values. There must be at least two servers in this list. e.g.,  localhost:9092,localhost:9093 . \n         \n         STRING \n         No \n         No \n     \n     \n         topic \n         The topic to which the Kafka sink needs to publish events. Only one topic must be specified. \n         \n         STRING \n         No \n         No \n     \n     \n         sequence.id \n         A unique identifier to identify the messages published by this sink. This ID allows receivers to identify the sink that published a specific message. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         key \n         The key contains the values that are used to maintain ordering in a Kafka partition. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         partition.no \n         The partition number for the given topic. Only one partition ID can be defined. If no value is specified for this parameter, the Kafka sink publishes to the default partition of the topic (i.e., 0) \n         0 \n         INT \n         Yes \n         No \n     \n     \n         optional.configuration \n         This parameter contains all the other possible configurations that the producer is created with.  e.g.,  producer.type:async,batch.size:200 \n         null \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @App:name('TestExecutionPlan') \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@sink(type='kafkaMultiDC', topic='myTopic', partition='0',bootstrap.servers='host1:9092, host2:9092', @map(type='xml'))Define stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  This query publishes to the  default (i.e., 0th) partition of the brokers in two data centers", 
            "title": "kafkaMultiDC (Sink)"
        }, 
        {
            "location": "/api/4.0.9/#kafka-sink", 
            "text": "A Kafka sink publishes events processed by WSO2 SP to a topic with a partition for a Kafka cluster. The events can be published in the  TEXT   XML  or  JSON  format. If the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic. The publishing topic and partition can be a dynamic value taken from the Siddhi event. To configure a sink to use the Kafka transport, the  type  parameter should have  kafka  as its value.  Syntax  @sink(type= kafka , bootstrap.servers= STRING , topic= STRING , partition.no= INT , sequence.id= STRING , key= STRING , optional.configuration= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         bootstrap.servers \n          This parameter specifies the list of Kafka servers to which the Kafka sink must publish events. This list should be provided as a set of comma separated values. e.g.,  localhost:9092,localhost:9093 . \n         \n         STRING \n         No \n         No \n     \n     \n         topic \n         The topic to which the Kafka sink needs to publish events. Only one topic must be specified. \n         \n         STRING \n         No \n         No \n     \n     \n         partition.no \n         The partition number for the given topic. Only one partition ID can be defined. If no value is specified for this parameter, the Kafka sink publishes to the default partition of the topic (i.e., 0) \n         0 \n         INT \n         Yes \n         No \n     \n     \n         sequence.id \n         A unique identifier to identify the messages published by this sink. This ID allows receivers to identify the sink that published a specific message. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         key \n         The key contains the values that are used to maintain ordering in a Kafka partition. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         optional.configuration \n         This parameter contains all the other possible configurations that the producer is created with.  e.g.,  producer.type:async,batch.size:200 \n         null \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @App:name('TestExecutionPlan') \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@sink(\ntype='kafka',\ntopic='topic_with_partitions',\npartition.no='0',\nbootstrap.servers='localhost:9092',\n@map(type='xml'))\nDefine stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  This Kafka sink configuration publishes to 0th partition of the topic named  topic_with_partitions .  EXAMPLE 2  @App:name('TestExecutionPlan') \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@sink(\ntype='kafka',\ntopic='{{symbol}}',\npartition.no='{{volume}}',\nbootstrap.servers='localhost:9092',\n@map(type='xml'))\nDefine stream BarStream (symbol string, price float, volume long); \nfrom FooStream select symbol, price, volume insert into BarStream;  This query publishes dynamic topic and partitions that are taken from the Siddhi event. The value for  partition.no  is taken from the  volume  attribute, and the topic value is taken from the  symbol  attribute.", 
            "title": "kafka (Sink)"
        }, 
        {
            "location": "/api/4.0.9/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/4.0.9/#kafka-source", 
            "text": "A Kafka source receives events to be processed by WSO2 SP from a topic with a partition for a Kafka cluster. The events received can be in the  TEXT   XML  or  JSON  format. If the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic.  Syntax  @source(type= kafka , bootstrap.servers= STRING , topic.list= STRING , group.id= STRING , threading.option= STRING , partition.no.list= STRING , seq.enabled= BOOL , optional.configuration= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         bootstrap.servers \n         This specifies the list of Kafka servers to which the Kafka source must listen. This list should beprovided as a set of comma-separated values. e.g.,  localhost:9092,localhost:9093 \n         \n         STRING \n         No \n         No \n     \n     \n         topic.list \n         This specifies the list of topics to which the source must listen. This list should be provided as a set of comma-separated values. e.g.,  topic_one,topic_two \n         \n         STRING \n         No \n         No \n     \n     \n         group.id \n         This is an ID to identify the Kafka source group. The group ID ensures that sources with the same topic and partition that are in the same group do not receive the same event. \n         \n         STRING \n         No \n         No \n     \n     \n         threading.option \n          This specifies whether the Kafka source is to be run on a single thread, or in multiple threads based on a condition. Possible values are as follows: single.thread : To run the Kafka source on a single thread. topic-wise : To use  separate thread per topic. partition.wise : To use a separate thread per partition. \n         \n         STRING \n         No \n         No \n     \n     \n         partition.no.list \n         The partition number list for the given topic. This is provided as a list of comma-separated values. e.g.,  0,1,2, . \n         0 \n         STRING \n         Yes \n         No \n     \n     \n         seq.enabled \n         If this parameter is set to  true , the sequence of the events received via the source is taken into account. Therefore, each event should contain a sequence number as an attribute value to indicate the sequence. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         optional.configuration \n         This parameter contains all the other possible configurations that the consumer is created with.  e.g.,  ssl.keystore.type:JKS,batch.size:200 . \n         null \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @App:name('TestExecutionPlan') \ndefine stream BarStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@source(\ntype='kafka', \ntopic.list='kafka_topic,kafka_topic2', \ngroup.id='test', \nthreading.option='partition.wise', \nbootstrap.servers='localhost:9092', \npartition.no.list='0,1', \n@map(type='xml'))\nDefine stream FooStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  This kafka source configuration listens to the  kafka_topic  and  kafka_topic2  topics with  0  and  1  partitions. A thread is created for each topic and partition combination. The events are received in the XML format, mapped to a Siddhi event, and sent to a stream named  FooStream .   EXAMPLE 2  @App:name('TestExecutionPlan') \ndefine stream BarStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@source(\ntype='kafka', \ntopic.list='kafka_topic',\ngroup.id='test', \nthreading.option='single.thread',\nbootstrap.servers='localhost:9092',\n@map(type='xml'))\nDefine stream FooStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  This Kafka source configuration listens to the  kafka_topic  topic for the default partition because no  partition.no.list  is defined. Only one thread is created for the topic. The events are received in the XML format, mapped to a Siddhi event, and sent to a stream named  FooStream .", 
            "title": "kafka (Source)"
        }, 
        {
            "location": "/api/4.0.8/", 
            "text": "API Docs - v4.0.8\n\n\nSource\n\n\nkafkaMultiDC \n(Source)\n\n\nThe Kafka Multi Data Center(DC) Source receives records from the same topic in brokers deployed in two different kafka cluster. It will filter out all duplicate messages and try to ensurethat the events are received in the correct order by using sequence numbers. events are received in format such as \ntext\n, \nXML\n and \nJSON\n.The Kafka Source will create the default partition  '0' for a given topic, if the topic is not already been created in the Kafka cluster.\n\n\n\nSyntax\n\n\n@source(type=\nkafkaMultiDC\n, bootstrap.servers=\nSTRING\n, topic=\nSTRING\n, partition.no=\nSTRING\n, optional.configuration=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nbootstrap.servers\n\n        \nThis should contain the kafka server list which the kafka source should be listening to. This should be given in comma separated values. eg: 'localhost:9092,localhost:9093' \n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntopic\n\n        \nThe topic  which the source would be listening to. eg: 'topic_one' \n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npartition.no\n\n        \nThe partition number for the given topic\n\n        \n0\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \noptional.configuration\n\n        \nThis may contain all the other possible configurations which the consumer should be created with.eg: producer.type:async,batch.size:200\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@App:name('TestExecutionPlan') \ndefine stream BarStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@source(type='kafkaMultiDC', topic='kafka_topic', bootstrap.servers='host1:9092,host1:9093', partition.no='1', @map(type='xml'))\nDefine stream FooStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThe following query will listen to 'kafka_topic' topic deployed in broker host1:9092 and host1:9093 with partition 1. There will be a thread created for each broker. The receiving xml events will be mapped to a siddhi event and will be send to the FooStream.\n\n\n\nkafka \n(Source)\n\n\nA Kafka source receives events to be processed by WSO2 SP from a topic with a partition for a Kafka cluster. The events received can be in the \nTEXT\n \nXML\n or \nJSON\n format.\nIf the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic.\n\n\n\nSyntax\n\n\n@source(type=\nkafka\n, bootstrap.servers=\nSTRING\n, topic.list=\nSTRING\n, group.id=\nSTRING\n, threading.option=\nSTRING\n, partition.no.list=\nSTRING\n, seq.enabled=\nBOOL\n, optional.configuration=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nbootstrap.servers\n\n        \nThis specifies the list of Kafka servers to which the Kafka source must listen. This list should beprovided as a set of comma-separated values.\ne.g., \nlocalhost:9092,localhost:9093\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntopic.list\n\n        \nThis specifies the list of topics to which the source must listen. This list should be provided as a set of comma-separated values.\ne.g., \ntopic_one,topic_two\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ngroup.id\n\n        \nThis is an ID to identify the Kafka source group. The group ID ensures that sources with the same topic and partition that are in the same group do not receive the same event.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nthreading.option\n\n        \n This specifies whether the Kafka source is to be run on a single thread, or in multiple threads based on a condition. Possible values are as follows:\nsingle.thread\n: To run the Kafka source on a single thread.\ntopic-wise\n: To use  separate thread per topic.\npartition.wise\n: To use a separate thread per partition.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npartition.no.list\n\n        \nThe partition number list for the given topic. This is provided as a list of comma-separated values. e.g., \n0,1,2,\n.\n\n        \n0\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nseq.enabled\n\n        \nIf this parameter is set to \ntrue\n, the sequence of the events received via the source is taken into account. Therefore, each event should contain a sequence number as an attribute value to indicate the sequence.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \noptional.configuration\n\n        \nThis parameter contains all the other possible configurations that the consumer is created with. \ne.g., \nssl.keystore.type:JKS,batch.size:200\n.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@App:name('TestExecutionPlan') \ndefine stream BarStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@source(\ntype='kafka', \ntopic.list='kafka_topic,kafka_topic2', \ngroup.id='test', \nthreading.option='partition.wise', \nbootstrap.servers='localhost:9092', \npartition.no.list='0,1', \n@map(type='xml'))\nDefine stream FooStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThis kafka source configuration listens to the \nkafka_topic\n and \nkafka_topic2\n topics with \n0\n and \n1\n partitions. A thread is created for each topic and partition combination. The events are received in the XML format, mapped to a Siddhi event, and sent to a stream named \nFooStream\n. \n\n\n\nEXAMPLE 2\n\n\n@App:name('TestExecutionPlan') \ndefine stream BarStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@source(\ntype='kafka', \ntopic.list='kafka_topic',\ngroup.id='test', \nthreading.option='single.thread',\nbootstrap.servers='localhost:9092',\n@map(type='xml'))\nDefine stream FooStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThis Kafka source configuration listens to the \nkafka_topic\n topic for the default partition because no \npartition.no.list\n is defined. Only one thread is created for the topic. The events are received in the XML format, mapped to a Siddhi event, and sent to a stream named \nFooStream\n.\n\n\n\nSink\n\n\nkafkaMultiDC \n(Sink)\n\n\nA Kafka sink publishes events processed by WSO2 SP to a topic with a partition for a Kafka cluster. The events can be published in the \nTEXT\n \nXML\n or \nJSON\n format.\nIf the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic. The publishing topic and partition can be a dynamic value taken from the Siddhi event.\nTo configure a sink to publish events via the Kafka transport, and using two Kafka brokers to publish events to the same topic, the \ntype\n parameter must have \nkafkaMultiDC\n as its value.\n\n\n\nSyntax\n\n\n@sink(type=\nkafkaMultiDC\n, bootstrap.servers=\nSTRING\n, topic=\nSTRING\n, sequence.id=\nSTRING\n, key=\nSTRING\n, partition.no=\nINT\n, optional.configuration=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nbootstrap.servers\n\n        \n This parameter specifies the list of Kafka servers to which the Kafka sink must publish events. This list should be provided as a set of comma separated values. There must be at least two servers in this list. e.g., \nlocalhost:9092,localhost:9093\n.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntopic\n\n        \nThe topic to which the Kafka sink needs to publish events. Only one topic must be specified.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nsequence.id\n\n        \nA unique identifier to identify the messages published by this sink. This ID allows receivers to identify the sink that published a specific message.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nkey\n\n        \nThe key contains the values that are used to maintain ordering in a Kafka partition.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \npartition.no\n\n        \nThe partition number for the given topic. Only one partition ID can be defined. If no value is specified for this parameter, the Kafka sink publishes to the default partition of the topic (i.e., 0)\n\n        \n0\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \noptional.configuration\n\n        \nThis parameter contains all the other possible configurations that the producer is created with. \ne.g., \nproducer.type:async,batch.size:200\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@App:name('TestExecutionPlan') \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@sink(type='kafkaMultiDC', topic='myTopic', partition.no='0',bootstrap.servers='host1:9092, host2:9092', @map(type='xml'))Define stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThis query publishes to the  default (i.e., 0th) partition of the brokers in two data centers \n\n\n\nkafka \n(Sink)\n\n\nA Kafka sink publishes events processed by WSO2 SP to a topic with a partition for a Kafka cluster. The events can be published in the \nTEXT\n \nXML\n or \nJSON\n format.\nIf the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic. The publishing topic and partition can be a dynamic value taken from the Siddhi event.\nTo configure a sink to use the Kafka transport, the \ntype\n parameter should have \nkafka\n as its value.\n\n\n\nSyntax\n\n\n@sink(type=\nkafka\n, bootstrap.servers=\nSTRING\n, topic=\nSTRING\n, partition.no=\nINT\n, sequence.id=\nSTRING\n, key=\nSTRING\n, optional.configuration=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nbootstrap.servers\n\n        \n This parameter specifies the list of Kafka servers to which the Kafka sink must publish events. This list should be provided as a set of comma separated values. e.g., \nlocalhost:9092,localhost:9093\n.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntopic\n\n        \nThe topic to which the Kafka sink needs to publish events. Only one topic must be specified.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npartition.no\n\n        \nThe partition number for the given topic. Only one partition ID can be defined. If no value is specified for this parameter, the Kafka sink publishes to the default partition of the topic (i.e., 0)\n\n        \n0\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsequence.id\n\n        \nA unique identifier to identify the messages published by this sink. This ID allows receivers to identify the sink that published a specific message.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nkey\n\n        \nThe key contains the values that are used to maintain ordering in a Kafka partition.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \noptional.configuration\n\n        \nThis parameter contains all the other possible configurations that the producer is created with. \ne.g., \nproducer.type:async,batch.size:200\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@App:name('TestExecutionPlan') \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@sink(\ntype='kafka',\ntopic='topic_with_partitions',\npartition.no='0',\nbootstrap.servers='localhost:9092',\n@map(type='xml'))\nDefine stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThis Kafka sink configuration publishes to 0th partition of the topic named \ntopic_with_partitions\n.\n\n\n\nEXAMPLE 2\n\n\n@App:name('TestExecutionPlan') \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@sink(\ntype='kafka',\ntopic='{{symbol}}',\npartition.no='{{volume}}',\nbootstrap.servers='localhost:9092',\n@map(type='xml'))\nDefine stream BarStream (symbol string, price float, volume long); \nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\nThis query publishes dynamic topic and partitions that are taken from the Siddhi event. The value for \npartition.no\n is taken from the \nvolume\n attribute, and the topic value is taken from the \nsymbol\n attribute.", 
            "title": "4.0.8"
        }, 
        {
            "location": "/api/4.0.8/#api-docs-v408", 
            "text": "", 
            "title": "API Docs - v4.0.8"
        }, 
        {
            "location": "/api/4.0.8/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/4.0.8/#kafkamultidc-source", 
            "text": "The Kafka Multi Data Center(DC) Source receives records from the same topic in brokers deployed in two different kafka cluster. It will filter out all duplicate messages and try to ensurethat the events are received in the correct order by using sequence numbers. events are received in format such as  text ,  XML  and  JSON .The Kafka Source will create the default partition  '0' for a given topic, if the topic is not already been created in the Kafka cluster.  Syntax  @source(type= kafkaMultiDC , bootstrap.servers= STRING , topic= STRING , partition.no= STRING , optional.configuration= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         bootstrap.servers \n         This should contain the kafka server list which the kafka source should be listening to. This should be given in comma separated values. eg: 'localhost:9092,localhost:9093'  \n         \n         STRING \n         No \n         No \n     \n     \n         topic \n         The topic  which the source would be listening to. eg: 'topic_one'  \n         \n         STRING \n         No \n         No \n     \n     \n         partition.no \n         The partition number for the given topic \n         0 \n         STRING \n         Yes \n         No \n     \n     \n         optional.configuration \n         This may contain all the other possible configurations which the consumer should be created with.eg: producer.type:async,batch.size:200 \n         null \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @App:name('TestExecutionPlan') \ndefine stream BarStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@source(type='kafkaMultiDC', topic='kafka_topic', bootstrap.servers='host1:9092,host1:9093', partition.no='1', @map(type='xml'))\nDefine stream FooStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  The following query will listen to 'kafka_topic' topic deployed in broker host1:9092 and host1:9093 with partition 1. There will be a thread created for each broker. The receiving xml events will be mapped to a siddhi event and will be send to the FooStream.", 
            "title": "kafkaMultiDC (Source)"
        }, 
        {
            "location": "/api/4.0.8/#kafka-source", 
            "text": "A Kafka source receives events to be processed by WSO2 SP from a topic with a partition for a Kafka cluster. The events received can be in the  TEXT   XML  or  JSON  format. If the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic.  Syntax  @source(type= kafka , bootstrap.servers= STRING , topic.list= STRING , group.id= STRING , threading.option= STRING , partition.no.list= STRING , seq.enabled= BOOL , optional.configuration= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         bootstrap.servers \n         This specifies the list of Kafka servers to which the Kafka source must listen. This list should beprovided as a set of comma-separated values. e.g.,  localhost:9092,localhost:9093 \n         \n         STRING \n         No \n         No \n     \n     \n         topic.list \n         This specifies the list of topics to which the source must listen. This list should be provided as a set of comma-separated values. e.g.,  topic_one,topic_two \n         \n         STRING \n         No \n         No \n     \n     \n         group.id \n         This is an ID to identify the Kafka source group. The group ID ensures that sources with the same topic and partition that are in the same group do not receive the same event. \n         \n         STRING \n         No \n         No \n     \n     \n         threading.option \n          This specifies whether the Kafka source is to be run on a single thread, or in multiple threads based on a condition. Possible values are as follows: single.thread : To run the Kafka source on a single thread. topic-wise : To use  separate thread per topic. partition.wise : To use a separate thread per partition. \n         \n         STRING \n         No \n         No \n     \n     \n         partition.no.list \n         The partition number list for the given topic. This is provided as a list of comma-separated values. e.g.,  0,1,2, . \n         0 \n         STRING \n         Yes \n         No \n     \n     \n         seq.enabled \n         If this parameter is set to  true , the sequence of the events received via the source is taken into account. Therefore, each event should contain a sequence number as an attribute value to indicate the sequence. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         optional.configuration \n         This parameter contains all the other possible configurations that the consumer is created with.  e.g.,  ssl.keystore.type:JKS,batch.size:200 . \n         null \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @App:name('TestExecutionPlan') \ndefine stream BarStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@source(\ntype='kafka', \ntopic.list='kafka_topic,kafka_topic2', \ngroup.id='test', \nthreading.option='partition.wise', \nbootstrap.servers='localhost:9092', \npartition.no.list='0,1', \n@map(type='xml'))\nDefine stream FooStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  This kafka source configuration listens to the  kafka_topic  and  kafka_topic2  topics with  0  and  1  partitions. A thread is created for each topic and partition combination. The events are received in the XML format, mapped to a Siddhi event, and sent to a stream named  FooStream .   EXAMPLE 2  @App:name('TestExecutionPlan') \ndefine stream BarStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@source(\ntype='kafka', \ntopic.list='kafka_topic',\ngroup.id='test', \nthreading.option='single.thread',\nbootstrap.servers='localhost:9092',\n@map(type='xml'))\nDefine stream FooStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  This Kafka source configuration listens to the  kafka_topic  topic for the default partition because no  partition.no.list  is defined. Only one thread is created for the topic. The events are received in the XML format, mapped to a Siddhi event, and sent to a stream named  FooStream .", 
            "title": "kafka (Source)"
        }, 
        {
            "location": "/api/4.0.8/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/4.0.8/#kafkamultidc-sink", 
            "text": "A Kafka sink publishes events processed by WSO2 SP to a topic with a partition for a Kafka cluster. The events can be published in the  TEXT   XML  or  JSON  format. If the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic. The publishing topic and partition can be a dynamic value taken from the Siddhi event. To configure a sink to publish events via the Kafka transport, and using two Kafka brokers to publish events to the same topic, the  type  parameter must have  kafkaMultiDC  as its value.  Syntax  @sink(type= kafkaMultiDC , bootstrap.servers= STRING , topic= STRING , sequence.id= STRING , key= STRING , partition.no= INT , optional.configuration= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         bootstrap.servers \n          This parameter specifies the list of Kafka servers to which the Kafka sink must publish events. This list should be provided as a set of comma separated values. There must be at least two servers in this list. e.g.,  localhost:9092,localhost:9093 . \n         \n         STRING \n         No \n         No \n     \n     \n         topic \n         The topic to which the Kafka sink needs to publish events. Only one topic must be specified. \n         \n         STRING \n         No \n         No \n     \n     \n         sequence.id \n         A unique identifier to identify the messages published by this sink. This ID allows receivers to identify the sink that published a specific message. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         key \n         The key contains the values that are used to maintain ordering in a Kafka partition. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         partition.no \n         The partition number for the given topic. Only one partition ID can be defined. If no value is specified for this parameter, the Kafka sink publishes to the default partition of the topic (i.e., 0) \n         0 \n         INT \n         Yes \n         No \n     \n     \n         optional.configuration \n         This parameter contains all the other possible configurations that the producer is created with.  e.g.,  producer.type:async,batch.size:200 \n         null \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @App:name('TestExecutionPlan') \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@sink(type='kafkaMultiDC', topic='myTopic', partition.no='0',bootstrap.servers='host1:9092, host2:9092', @map(type='xml'))Define stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  This query publishes to the  default (i.e., 0th) partition of the brokers in two data centers", 
            "title": "kafkaMultiDC (Sink)"
        }, 
        {
            "location": "/api/4.0.8/#kafka-sink", 
            "text": "A Kafka sink publishes events processed by WSO2 SP to a topic with a partition for a Kafka cluster. The events can be published in the  TEXT   XML  or  JSON  format. If the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic. The publishing topic and partition can be a dynamic value taken from the Siddhi event. To configure a sink to use the Kafka transport, the  type  parameter should have  kafka  as its value.  Syntax  @sink(type= kafka , bootstrap.servers= STRING , topic= STRING , partition.no= INT , sequence.id= STRING , key= STRING , optional.configuration= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         bootstrap.servers \n          This parameter specifies the list of Kafka servers to which the Kafka sink must publish events. This list should be provided as a set of comma separated values. e.g.,  localhost:9092,localhost:9093 . \n         \n         STRING \n         No \n         No \n     \n     \n         topic \n         The topic to which the Kafka sink needs to publish events. Only one topic must be specified. \n         \n         STRING \n         No \n         No \n     \n     \n         partition.no \n         The partition number for the given topic. Only one partition ID can be defined. If no value is specified for this parameter, the Kafka sink publishes to the default partition of the topic (i.e., 0) \n         0 \n         INT \n         Yes \n         No \n     \n     \n         sequence.id \n         A unique identifier to identify the messages published by this sink. This ID allows receivers to identify the sink that published a specific message. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         key \n         The key contains the values that are used to maintain ordering in a Kafka partition. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         optional.configuration \n         This parameter contains all the other possible configurations that the producer is created with.  e.g.,  producer.type:async,batch.size:200 \n         null \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @App:name('TestExecutionPlan') \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@sink(\ntype='kafka',\ntopic='topic_with_partitions',\npartition.no='0',\nbootstrap.servers='localhost:9092',\n@map(type='xml'))\nDefine stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  This Kafka sink configuration publishes to 0th partition of the topic named  topic_with_partitions .  EXAMPLE 2  @App:name('TestExecutionPlan') \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@sink(\ntype='kafka',\ntopic='{{symbol}}',\npartition.no='{{volume}}',\nbootstrap.servers='localhost:9092',\n@map(type='xml'))\nDefine stream BarStream (symbol string, price float, volume long); \nfrom FooStream select symbol, price, volume insert into BarStream;  This query publishes dynamic topic and partitions that are taken from the Siddhi event. The value for  partition.no  is taken from the  volume  attribute, and the topic value is taken from the  symbol  attribute.", 
            "title": "kafka (Sink)"
        }, 
        {
            "location": "/api/4.0.7/", 
            "text": "API Docs - v4.0.7\n\n\nSource\n\n\nkafka \n(Source)\n\n\nA Kafka source receives events to be processed by WSO2 SP from a topic with a partition for a Kafka cluster. The events received can be in the \nTEXT\n \nXML\n or \nJSON\n format.\nIf the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic.\n\n\n\nSyntax\n\n\n@source(type=\nkafka\n, bootstrap.servers=\nSTRING\n, topic.list=\nSTRING\n, group.id=\nSTRING\n, threading.option=\nSTRING\n, partition.no.list=\nSTRING\n, seq.enabled=\nBOOL\n, optional.configuration=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nbootstrap.servers\n\n        \nThis specifies the list of Kafka servers to which the Kafka source must listen. This list should beprovided as a set of comma-separated values.\ne.g., \nlocalhost:9092,localhost:9093\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntopic.list\n\n        \nThis specifies the list of topics to which the source must listen. This list should be provided as a set of comma-separated values.\ne.g., \ntopic_one,topic_two\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ngroup.id\n\n        \nThis is an ID to identify the Kafka source group. The group ID ensures that sources with the same topic and partition that are in the same group do not receive the same event.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nthreading.option\n\n        \n This specifies whether the Kafka source is to be run on a single thread, or in multiple threads based on a condition. Possible values are as follows:\nsingle.thread\n: To run the Kafka source on a single thread.\ntopic-wise\n: To use  separate thread per topic.\npartition.wise\n: To use a separate thread per partition.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npartition.no.list\n\n        \nThe partition number list for the given topic. This is provided as a list of comma-separated values. e.g., \n0,1,2,\n.\n\n        \n0\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nseq.enabled\n\n        \nIf this parameter is set to \ntrue\n, the sequence of the events received via the source is taken into account. Therefore, each event should contain a sequence number as an attribute value to indicate the sequence.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \noptional.configuration\n\n        \nThis parameter contains all the other possible configurations that the consumer is created with. \ne.g., \nssl.keystore.type:JKS,batch.size:200\n.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@App:name('TestExecutionPlan') \ndefine stream BarStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@source(\ntype='kafka', \ntopic.list='kafka_topic,kafka_topic2', \ngroup.id='test', \nthreading.option='partition.wise', \nbootstrap.servers='localhost:9092', \npartition.no.list='0,1', \n@map(type='xml'))\nDefine stream FooStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThis kafka source configuration listens to the \nkafka_topic\n and \nkafka_topic2\n topics with \n0\n and \n1\n partitions. A thread is created for each topic and partition combination. The events are received in the XML format, mapped to a Siddhi event, and sent to a stream named \nFooStream\n. \n\n\n\nEXAMPLE 2\n\n\n@App:name('TestExecutionPlan') \ndefine stream BarStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@source(\ntype='kafka', \ntopic.list='kafka_topic',\ngroup.id='test', \nthreading.option='single.thread',\nbootstrap.servers='localhost:9092',\n@map(type='xml'))\nDefine stream FooStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThis Kafka source configuration listens to the \nkafka_topic\n topic for the default partition because no \npartition.no.list\n is defined. Only one thread is created for the topic. The events are received in the XML format, mapped to a Siddhi event, and sent to a stream named \nFooStream\n.\n\n\n\nSink\n\n\nkafkaMultiDC \n(Sink)\n\n\nA Kafka sink publishes events processed by WSO2 SP to a topic with a partition for a Kafka cluster. The events can be published in the \nTEXT\n \nXML\n or \nJSON\n format.\nIf the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic. The publishing topic and partition can be a dynamic value taken from the Siddhi event.\nTo configure a sink to publish events via the Kafka transport, and using two Kafka brokers to publish events to the same topic, the \ntype\n parameter must have \nkafkaMultiDC\n as its value.\n\n\n\nSyntax\n\n\n@sink(type=\nkafkaMultiDC\n, bootstrap.servers=\nSTRING\n, topic=\nSTRING\n, sequence.id=\nSTRING\n, key=\nSTRING\n, partition.no=\nINT\n, optional.configuration=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nbootstrap.servers\n\n        \n This parameter specifies the list of Kafka servers to which the Kafka sink must publish events. This list should be provided as a set of comma separated values. There must be at least two servers in this list. e.g., \nlocalhost:9092,localhost:9093\n.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntopic\n\n        \nThe topic to which the Kafka sink needs to publish events. Only one topic must be specified.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nsequence.id\n\n        \nA unique identifier to identify the messages published by this sink. This ID allows receivers to identify the sink that published a specific message.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nkey\n\n        \nThe key contains the values that are used to maintain ordering in a Kafka partition.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \npartition.no\n\n        \nThe partition number for the given topic. Only one partition ID can be defined. If no value is specified for this parameter, the Kafka sink publishes to the default partition of the topic (i.e., 0)\n\n        \n0\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \noptional.configuration\n\n        \nThis parameter contains all the other possible configurations that the producer is created with. \ne.g., \nproducer.type:async,batch.size:200\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@App:name('TestExecutionPlan') \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@sink(type='kafkaMultiDC', topic='myTopic', partition='0',bootstrap.servers='host1:9092, host2:9092', @map(type='xml'))Define stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThis query publishes to the  default (i.e., 0th) partition of the brokers in two data centers \n\n\n\nkafka \n(Sink)\n\n\nA Kafka sink publishes events processed by WSO2 SP to a topic with a partition for a Kafka cluster. The events can be published in the \nTEXT\n \nXML\n or \nJSON\n format.\nIf the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic. The publishing topic and partition can be a dynamic value taken from the Siddhi event.\nTo configure a sink to use the Kafka transport, the \ntype\n parameter should have \nkafka\n as its value.\n\n\n\nSyntax\n\n\n@sink(type=\nkafka\n, bootstrap.servers=\nSTRING\n, topic=\nSTRING\n, partition.no=\nINT\n, sequence.id=\nSTRING\n, key=\nSTRING\n, optional.configuration=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nbootstrap.servers\n\n        \n This parameter specifies the list of Kafka servers to which the Kafka sink must publish events. This list should be provided as a set of comma separated values. e.g., \nlocalhost:9092,localhost:9093\n.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntopic\n\n        \nThe topic to which the Kafka sink needs to publish events. Only one topic must be specified.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npartition.no\n\n        \nThe partition number for the given topic. Only one partition ID can be defined. If no value is specified for this parameter, the Kafka sink publishes to the default partition of the topic (i.e., 0)\n\n        \n0\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsequence.id\n\n        \nA unique identifier to identify the messages published by this sink. This ID allows receivers to identify the sink that published a specific message.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nkey\n\n        \nThe key contains the values that are used to maintain ordering in a Kafka partition.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \noptional.configuration\n\n        \nThis parameter contains all the other possible configurations that the producer is created with. \ne.g., \nproducer.type:async,batch.size:200\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@App:name('TestExecutionPlan') \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@sink(\ntype='kafka',\ntopic='topic_with_partitions',\npartition.no='0',\nbootstrap.servers='localhost:9092',\n@map(type='xml'))\nDefine stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThis Kafka sink configuration publishes to 0th partition of the topic named \ntopic_with_partitions\n.\n\n\n\nEXAMPLE 2\n\n\n@App:name('TestExecutionPlan') \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@sink(\ntype='kafka',\ntopic='{{symbol}}',\npartition.no='{{volume}}',\nbootstrap.servers='localhost:9092',\n@map(type='xml'))\nDefine stream BarStream (symbol string, price float, volume long); \nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\nThis query publishes dynamic topic and partitions that are taken from the Siddhi event. The value for \npartition.no\n is taken from the \nvolume\n attribute, and the topic value is taken from the \nsymbol\n attribute.", 
            "title": "4.0.7"
        }, 
        {
            "location": "/api/4.0.7/#api-docs-v407", 
            "text": "", 
            "title": "API Docs - v4.0.7"
        }, 
        {
            "location": "/api/4.0.7/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/4.0.7/#kafka-source", 
            "text": "A Kafka source receives events to be processed by WSO2 SP from a topic with a partition for a Kafka cluster. The events received can be in the  TEXT   XML  or  JSON  format. If the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic.  Syntax  @source(type= kafka , bootstrap.servers= STRING , topic.list= STRING , group.id= STRING , threading.option= STRING , partition.no.list= STRING , seq.enabled= BOOL , optional.configuration= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         bootstrap.servers \n         This specifies the list of Kafka servers to which the Kafka source must listen. This list should beprovided as a set of comma-separated values. e.g.,  localhost:9092,localhost:9093 \n         \n         STRING \n         No \n         No \n     \n     \n         topic.list \n         This specifies the list of topics to which the source must listen. This list should be provided as a set of comma-separated values. e.g.,  topic_one,topic_two \n         \n         STRING \n         No \n         No \n     \n     \n         group.id \n         This is an ID to identify the Kafka source group. The group ID ensures that sources with the same topic and partition that are in the same group do not receive the same event. \n         \n         STRING \n         No \n         No \n     \n     \n         threading.option \n          This specifies whether the Kafka source is to be run on a single thread, or in multiple threads based on a condition. Possible values are as follows: single.thread : To run the Kafka source on a single thread. topic-wise : To use  separate thread per topic. partition.wise : To use a separate thread per partition. \n         \n         STRING \n         No \n         No \n     \n     \n         partition.no.list \n         The partition number list for the given topic. This is provided as a list of comma-separated values. e.g.,  0,1,2, . \n         0 \n         STRING \n         Yes \n         No \n     \n     \n         seq.enabled \n         If this parameter is set to  true , the sequence of the events received via the source is taken into account. Therefore, each event should contain a sequence number as an attribute value to indicate the sequence. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         optional.configuration \n         This parameter contains all the other possible configurations that the consumer is created with.  e.g.,  ssl.keystore.type:JKS,batch.size:200 . \n         null \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @App:name('TestExecutionPlan') \ndefine stream BarStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@source(\ntype='kafka', \ntopic.list='kafka_topic,kafka_topic2', \ngroup.id='test', \nthreading.option='partition.wise', \nbootstrap.servers='localhost:9092', \npartition.no.list='0,1', \n@map(type='xml'))\nDefine stream FooStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  This kafka source configuration listens to the  kafka_topic  and  kafka_topic2  topics with  0  and  1  partitions. A thread is created for each topic and partition combination. The events are received in the XML format, mapped to a Siddhi event, and sent to a stream named  FooStream .   EXAMPLE 2  @App:name('TestExecutionPlan') \ndefine stream BarStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@source(\ntype='kafka', \ntopic.list='kafka_topic',\ngroup.id='test', \nthreading.option='single.thread',\nbootstrap.servers='localhost:9092',\n@map(type='xml'))\nDefine stream FooStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  This Kafka source configuration listens to the  kafka_topic  topic for the default partition because no  partition.no.list  is defined. Only one thread is created for the topic. The events are received in the XML format, mapped to a Siddhi event, and sent to a stream named  FooStream .", 
            "title": "kafka (Source)"
        }, 
        {
            "location": "/api/4.0.7/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/4.0.7/#kafkamultidc-sink", 
            "text": "A Kafka sink publishes events processed by WSO2 SP to a topic with a partition for a Kafka cluster. The events can be published in the  TEXT   XML  or  JSON  format. If the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic. The publishing topic and partition can be a dynamic value taken from the Siddhi event. To configure a sink to publish events via the Kafka transport, and using two Kafka brokers to publish events to the same topic, the  type  parameter must have  kafkaMultiDC  as its value.  Syntax  @sink(type= kafkaMultiDC , bootstrap.servers= STRING , topic= STRING , sequence.id= STRING , key= STRING , partition.no= INT , optional.configuration= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         bootstrap.servers \n          This parameter specifies the list of Kafka servers to which the Kafka sink must publish events. This list should be provided as a set of comma separated values. There must be at least two servers in this list. e.g.,  localhost:9092,localhost:9093 . \n         \n         STRING \n         No \n         No \n     \n     \n         topic \n         The topic to which the Kafka sink needs to publish events. Only one topic must be specified. \n         \n         STRING \n         No \n         No \n     \n     \n         sequence.id \n         A unique identifier to identify the messages published by this sink. This ID allows receivers to identify the sink that published a specific message. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         key \n         The key contains the values that are used to maintain ordering in a Kafka partition. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         partition.no \n         The partition number for the given topic. Only one partition ID can be defined. If no value is specified for this parameter, the Kafka sink publishes to the default partition of the topic (i.e., 0) \n         0 \n         INT \n         Yes \n         No \n     \n     \n         optional.configuration \n         This parameter contains all the other possible configurations that the producer is created with.  e.g.,  producer.type:async,batch.size:200 \n         null \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @App:name('TestExecutionPlan') \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@sink(type='kafkaMultiDC', topic='myTopic', partition='0',bootstrap.servers='host1:9092, host2:9092', @map(type='xml'))Define stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  This query publishes to the  default (i.e., 0th) partition of the brokers in two data centers", 
            "title": "kafkaMultiDC (Sink)"
        }, 
        {
            "location": "/api/4.0.7/#kafka-sink", 
            "text": "A Kafka sink publishes events processed by WSO2 SP to a topic with a partition for a Kafka cluster. The events can be published in the  TEXT   XML  or  JSON  format. If the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic. The publishing topic and partition can be a dynamic value taken from the Siddhi event. To configure a sink to use the Kafka transport, the  type  parameter should have  kafka  as its value.  Syntax  @sink(type= kafka , bootstrap.servers= STRING , topic= STRING , partition.no= INT , sequence.id= STRING , key= STRING , optional.configuration= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         bootstrap.servers \n          This parameter specifies the list of Kafka servers to which the Kafka sink must publish events. This list should be provided as a set of comma separated values. e.g.,  localhost:9092,localhost:9093 . \n         \n         STRING \n         No \n         No \n     \n     \n         topic \n         The topic to which the Kafka sink needs to publish events. Only one topic must be specified. \n         \n         STRING \n         No \n         No \n     \n     \n         partition.no \n         The partition number for the given topic. Only one partition ID can be defined. If no value is specified for this parameter, the Kafka sink publishes to the default partition of the topic (i.e., 0) \n         0 \n         INT \n         Yes \n         No \n     \n     \n         sequence.id \n         A unique identifier to identify the messages published by this sink. This ID allows receivers to identify the sink that published a specific message. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         key \n         The key contains the values that are used to maintain ordering in a Kafka partition. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         optional.configuration \n         This parameter contains all the other possible configurations that the producer is created with.  e.g.,  producer.type:async,batch.size:200 \n         null \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @App:name('TestExecutionPlan') \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@sink(\ntype='kafka',\ntopic='topic_with_partitions',\npartition.no='0',\nbootstrap.servers='localhost:9092',\n@map(type='xml'))\nDefine stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  This Kafka sink configuration publishes to 0th partition of the topic named  topic_with_partitions .  EXAMPLE 2  @App:name('TestExecutionPlan') \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@sink(\ntype='kafka',\ntopic='{{symbol}}',\npartition.no='{{volume}}',\nbootstrap.servers='localhost:9092',\n@map(type='xml'))\nDefine stream BarStream (symbol string, price float, volume long); \nfrom FooStream select symbol, price, volume insert into BarStream;  This query publishes dynamic topic and partitions that are taken from the Siddhi event. The value for  partition.no  is taken from the  volume  attribute, and the topic value is taken from the  symbol  attribute.", 
            "title": "kafka (Sink)"
        }, 
        {
            "location": "/api/latest/", 
            "text": "API Docs - v4.0.17\n\n\nSink\n\n\nkafka \n(Sink)\n\n\nA Kafka sink publishes events processed by WSO2 SP to a topic with a partition for a Kafka cluster. The events can be published in the \nTEXT\n \nXML\n \nJSON\n or \nBinary\n format.\nIf the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic. The publishing topic and partition can be a dynamic value taken from the Siddhi event.\nTo configure a sink to use the Kafka transport, the \ntype\n parameter should have \nkafka\n as its value.\n\n\n\nSyntax\n\n\n@sink(type=\nkafka\n, bootstrap.servers=\nSTRING\n, topic=\nSTRING\n, partition.no=\nINT\n, sequence.id=\nSTRING\n, key=\nSTRING\n, is.binary.message=\nBOOL\n, optional.configuration=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nbootstrap.servers\n\n        \n This parameter specifies the list of Kafka servers to which the Kafka sink must publish events. This list should be provided as a set of comma separated values. e.g., \nlocalhost:9092,localhost:9093\n.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntopic\n\n        \nThe topic to which the Kafka sink needs to publish events. Only one topic must be specified.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npartition.no\n\n        \nThe partition number for the given topic. Only one partition ID can be defined. If no value is specified for this parameter, the Kafka sink publishes to the default partition of the topic (i.e., 0)\n\n        \n0\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsequence.id\n\n        \nA unique identifier to identify the messages published by this sink. This ID allows receivers to identify the sink that published a specific message.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nkey\n\n        \nThe key contains the values that are used to maintain ordering in a Kafka partition.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nis.binary.message\n\n        \nTo send the binary events via kafka sink, it is needed to set this parameter value to \ntrue\n.\n\n        \nnull\n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \noptional.configuration\n\n        \nThis parameter contains all the other possible configurations that the producer is created with. \ne.g., \nproducer.type:async,batch.size:200\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@App:name('TestExecutionPlan') \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@sink(\ntype='kafka',\ntopic='topic_with_partitions',\npartition.no='0',\nbootstrap.servers='localhost:9092',\n@map(type='xml'))\nDefine stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThis Kafka sink configuration publishes to 0th partition of the topic named \ntopic_with_partitions\n.\n\n\n\nEXAMPLE 2\n\n\n@App:name('TestExecutionPlan') \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@sink(\ntype='kafka',\ntopic='{{symbol}}',\npartition.no='{{volume}}',\nbootstrap.servers='localhost:9092',\n@map(type='xml'))\nDefine stream BarStream (symbol string, price float, volume long); \nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\nThis query publishes dynamic topic and partitions that are taken from the Siddhi event. The value for \npartition.no\n is taken from the \nvolume\n attribute, and the topic value is taken from the \nsymbol\n attribute.\n\n\n\nkafkaMultiDC \n(Sink)\n\n\nA Kafka sink publishes events processed by WSO2 SP to a topic with a partition for a Kafka cluster. The events can be published in the \nTEXT\n \nXML\n \nJSON\n or \nBinary\n format.\nIf the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic. The publishing topic and partition can be a dynamic value taken from the Siddhi event.\nTo configure a sink to publish events via the Kafka transport, and using two Kafka brokers to publish events to the same topic, the \ntype\n parameter must have \nkafkaMultiDC\n as its value.\n\n\n\nSyntax\n\n\n@sink(type=\nkafkaMultiDC\n, bootstrap.servers=\nSTRING\n, topic=\nSTRING\n, sequence.id=\nSTRING\n, key=\nSTRING\n, partition.no=\nINT\n, is.binary.message=\nBOOL\n, optional.configuration=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nbootstrap.servers\n\n        \n This parameter specifies the list of Kafka servers to which the Kafka sink must publish events. This list should be provided as a set of comma separated values. There must be at least two servers in this list. e.g., \nlocalhost:9092,localhost:9093\n.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntopic\n\n        \nThe topic to which the Kafka sink needs to publish events. Only one topic must be specified.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nsequence.id\n\n        \nA unique identifier to identify the messages published by this sink. This ID allows receivers to identify the sink that published a specific message.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nkey\n\n        \nThe key contains the values that are used to maintain ordering in a Kafka partition.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \npartition.no\n\n        \nThe partition number for the given topic. Only one partition ID can be defined. If no value is specified for this parameter, the Kafka sink publishes to the default partition of the topic (i.e., 0)\n\n        \n0\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nis.binary.message\n\n        \nTo send the binary events via kafkaMultiDCSink, it is needed to set this parameter value to \ntrue\n.\n\n        \nnull\n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \noptional.configuration\n\n        \nThis parameter contains all the other possible configurations that the producer is created with. \ne.g., \nproducer.type:async,batch.size:200\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@App:name('TestExecutionPlan') \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@sink(type='kafkaMultiDC', topic='myTopic', partition.no='0',bootstrap.servers='host1:9092, host2:9092', @map(type='xml'))Define stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThis query publishes to the  default (i.e., 0th) partition of the brokers in two data centers \n\n\n\nSource\n\n\nkafka \n(Source)\n\n\nA Kafka source receives events to be processed by WSO2 SP from a topic with a partition for a Kafka cluster. The events received can be in the \nTEXT\n \nXML\n \nJSON\n or \nBinary\n format.\nIf the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic.\n\n\n\nSyntax\n\n\n@source(type=\nkafka\n, bootstrap.servers=\nSTRING\n, topic.list=\nSTRING\n, group.id=\nSTRING\n, threading.option=\nSTRING\n, partition.no.list=\nSTRING\n, seq.enabled=\nBOOL\n, is.binary.message=\nBOOL\n, optional.configuration=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nbootstrap.servers\n\n        \nThis specifies the list of Kafka servers to which the Kafka source must listen. This list should beprovided as a set of comma-separated values.\ne.g., \nlocalhost:9092,localhost:9093\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntopic.list\n\n        \nThis specifies the list of topics to which the source must listen. This list should be provided as a set of comma-separated values.\ne.g., \ntopic_one,topic_two\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ngroup.id\n\n        \nThis is an ID to identify the Kafka source group. The group ID ensures that sources with the same topic and partition that are in the same group do not receive the same event.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nthreading.option\n\n        \n This specifies whether the Kafka source is to be run on a single thread, or in multiple threads based on a condition. Possible values are as follows:\nsingle.thread\n: To run the Kafka source on a single thread.\ntopic-wise\n: To use  separate thread per topic.\npartition.wise\n: To use a separate thread per partition.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npartition.no.list\n\n        \nThe partition number list for the given topic. This is provided as a list of comma-separated values. e.g., \n0,1,2,\n.\n\n        \n0\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nseq.enabled\n\n        \nIf this parameter is set to \ntrue\n, the sequence of the events received via the source is taken into account. Therefore, each event should contain a sequence number as an attribute value to indicate the sequence.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nis.binary.message\n\n        \nTo receive the binary events via kafka source, it is needed to set this parameter value to \ntrue\n.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \noptional.configuration\n\n        \nThis parameter contains all the other possible configurations that the consumer is created with. \ne.g., \nssl.keystore.type:JKS,batch.size:200\n.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@App:name('TestExecutionPlan') \ndefine stream BarStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@source(\ntype='kafka', \ntopic.list='kafka_topic,kafka_topic2', \ngroup.id='test', \nthreading.option='partition.wise', \nbootstrap.servers='localhost:9092', \npartition.no.list='0,1', \n@map(type='xml'))\nDefine stream FooStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThis kafka source configuration listens to the \nkafka_topic\n and \nkafka_topic2\n topics with \n0\n and \n1\n partitions. A thread is created for each topic and partition combination. The events are received in the XML format, mapped to a Siddhi event, and sent to a stream named \nFooStream\n. \n\n\n\nEXAMPLE 2\n\n\n@App:name('TestExecutionPlan') \ndefine stream BarStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@source(\ntype='kafka', \ntopic.list='kafka_topic',\ngroup.id='test', \nthreading.option='single.thread',\nbootstrap.servers='localhost:9092',\n@map(type='xml'))\nDefine stream FooStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThis Kafka source configuration listens to the \nkafka_topic\n topic for the default partition because no \npartition.no.list\n is defined. Only one thread is created for the topic. The events are received in the XML format, mapped to a Siddhi event, and sent to a stream named \nFooStream\n.\n\n\n\nkafkaMultiDC \n(Source)\n\n\nThe Kafka Multi Data Center(DC) Source receives records from the same topic in brokers deployed in two different kafka cluster. It will filter out all duplicate messages and try to ensurethat the events are received in the correct order by using sequence numbers. events are received in format such as \ntext\n, \nXML\n JSON\n and \nBinary`.The Kafka Source will create the default partition '0' for a given topic, if the topic is not already been created in the Kafka cluster.\n\n\n\nSyntax\n\n\n@source(type=\nkafkaMultiDC\n, bootstrap.servers=\nSTRING\n, topic=\nSTRING\n, partition.no=\nINT\n, is.binary.message=\nBOOL\n, optional.configuration=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nbootstrap.servers\n\n        \nThis should contain the kafka server list which the kafka source should be listening to. This should be given in comma separated values. eg: 'localhost:9092,localhost:9093' \n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntopic\n\n        \nThe topic  which the source would be listening to. eg: 'topic_one' \n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npartition.no\n\n        \nThe partition number for the given topic\n\n        \n0\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nis.binary.message\n\n        \nTo receive the binary events via KafkaMultiDCSource, it is needed to set this parameter value to \ntrue\n.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \noptional.configuration\n\n        \nThis may contain all the other possible configurations which the consumer should be created with.eg: producer.type:async,batch.size:200\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@App:name('TestExecutionPlan') \ndefine stream BarStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@source(type='kafkaMultiDC', topic='kafka_topic', bootstrap.servers='host1:9092,host1:9093', partition.no='1', @map(type='xml'))\nDefine stream FooStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThe following query will listen to 'kafka_topic' topic deployed in broker host1:9092 and host1:9093 with partition 1. There will be a thread created for each broker. The receiving xml events will be mapped to a siddhi event and will be send to the FooStream.", 
            "title": "latest"
        }, 
        {
            "location": "/api/latest/#api-docs-v4017", 
            "text": "", 
            "title": "API Docs - v4.0.17"
        }, 
        {
            "location": "/api/latest/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/latest/#kafka-sink", 
            "text": "A Kafka sink publishes events processed by WSO2 SP to a topic with a partition for a Kafka cluster. The events can be published in the  TEXT   XML   JSON  or  Binary  format. If the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic. The publishing topic and partition can be a dynamic value taken from the Siddhi event. To configure a sink to use the Kafka transport, the  type  parameter should have  kafka  as its value.  Syntax  @sink(type= kafka , bootstrap.servers= STRING , topic= STRING , partition.no= INT , sequence.id= STRING , key= STRING , is.binary.message= BOOL , optional.configuration= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         bootstrap.servers \n          This parameter specifies the list of Kafka servers to which the Kafka sink must publish events. This list should be provided as a set of comma separated values. e.g.,  localhost:9092,localhost:9093 . \n         \n         STRING \n         No \n         No \n     \n     \n         topic \n         The topic to which the Kafka sink needs to publish events. Only one topic must be specified. \n         \n         STRING \n         No \n         No \n     \n     \n         partition.no \n         The partition number for the given topic. Only one partition ID can be defined. If no value is specified for this parameter, the Kafka sink publishes to the default partition of the topic (i.e., 0) \n         0 \n         INT \n         Yes \n         No \n     \n     \n         sequence.id \n         A unique identifier to identify the messages published by this sink. This ID allows receivers to identify the sink that published a specific message. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         key \n         The key contains the values that are used to maintain ordering in a Kafka partition. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         is.binary.message \n         To send the binary events via kafka sink, it is needed to set this parameter value to  true . \n         null \n         BOOL \n         No \n         No \n     \n     \n         optional.configuration \n         This parameter contains all the other possible configurations that the producer is created with.  e.g.,  producer.type:async,batch.size:200 \n         null \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @App:name('TestExecutionPlan') \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@sink(\ntype='kafka',\ntopic='topic_with_partitions',\npartition.no='0',\nbootstrap.servers='localhost:9092',\n@map(type='xml'))\nDefine stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  This Kafka sink configuration publishes to 0th partition of the topic named  topic_with_partitions .  EXAMPLE 2  @App:name('TestExecutionPlan') \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@sink(\ntype='kafka',\ntopic='{{symbol}}',\npartition.no='{{volume}}',\nbootstrap.servers='localhost:9092',\n@map(type='xml'))\nDefine stream BarStream (symbol string, price float, volume long); \nfrom FooStream select symbol, price, volume insert into BarStream;  This query publishes dynamic topic and partitions that are taken from the Siddhi event. The value for  partition.no  is taken from the  volume  attribute, and the topic value is taken from the  symbol  attribute.", 
            "title": "kafka (Sink)"
        }, 
        {
            "location": "/api/latest/#kafkamultidc-sink", 
            "text": "A Kafka sink publishes events processed by WSO2 SP to a topic with a partition for a Kafka cluster. The events can be published in the  TEXT   XML   JSON  or  Binary  format. If the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic. The publishing topic and partition can be a dynamic value taken from the Siddhi event. To configure a sink to publish events via the Kafka transport, and using two Kafka brokers to publish events to the same topic, the  type  parameter must have  kafkaMultiDC  as its value.  Syntax  @sink(type= kafkaMultiDC , bootstrap.servers= STRING , topic= STRING , sequence.id= STRING , key= STRING , partition.no= INT , is.binary.message= BOOL , optional.configuration= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         bootstrap.servers \n          This parameter specifies the list of Kafka servers to which the Kafka sink must publish events. This list should be provided as a set of comma separated values. There must be at least two servers in this list. e.g.,  localhost:9092,localhost:9093 . \n         \n         STRING \n         No \n         No \n     \n     \n         topic \n         The topic to which the Kafka sink needs to publish events. Only one topic must be specified. \n         \n         STRING \n         No \n         No \n     \n     \n         sequence.id \n         A unique identifier to identify the messages published by this sink. This ID allows receivers to identify the sink that published a specific message. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         key \n         The key contains the values that are used to maintain ordering in a Kafka partition. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         partition.no \n         The partition number for the given topic. Only one partition ID can be defined. If no value is specified for this parameter, the Kafka sink publishes to the default partition of the topic (i.e., 0) \n         0 \n         INT \n         Yes \n         No \n     \n     \n         is.binary.message \n         To send the binary events via kafkaMultiDCSink, it is needed to set this parameter value to  true . \n         null \n         BOOL \n         No \n         No \n     \n     \n         optional.configuration \n         This parameter contains all the other possible configurations that the producer is created with.  e.g.,  producer.type:async,batch.size:200 \n         null \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @App:name('TestExecutionPlan') \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@sink(type='kafkaMultiDC', topic='myTopic', partition.no='0',bootstrap.servers='host1:9092, host2:9092', @map(type='xml'))Define stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  This query publishes to the  default (i.e., 0th) partition of the brokers in two data centers", 
            "title": "kafkaMultiDC (Sink)"
        }, 
        {
            "location": "/api/latest/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/latest/#kafka-source", 
            "text": "A Kafka source receives events to be processed by WSO2 SP from a topic with a partition for a Kafka cluster. The events received can be in the  TEXT   XML   JSON  or  Binary  format. If the topic is not already created in the Kafka cluster, the Kafka sink creates the default partition for the given topic.  Syntax  @source(type= kafka , bootstrap.servers= STRING , topic.list= STRING , group.id= STRING , threading.option= STRING , partition.no.list= STRING , seq.enabled= BOOL , is.binary.message= BOOL , optional.configuration= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         bootstrap.servers \n         This specifies the list of Kafka servers to which the Kafka source must listen. This list should beprovided as a set of comma-separated values. e.g.,  localhost:9092,localhost:9093 \n         \n         STRING \n         No \n         No \n     \n     \n         topic.list \n         This specifies the list of topics to which the source must listen. This list should be provided as a set of comma-separated values. e.g.,  topic_one,topic_two \n         \n         STRING \n         No \n         No \n     \n     \n         group.id \n         This is an ID to identify the Kafka source group. The group ID ensures that sources with the same topic and partition that are in the same group do not receive the same event. \n         \n         STRING \n         No \n         No \n     \n     \n         threading.option \n          This specifies whether the Kafka source is to be run on a single thread, or in multiple threads based on a condition. Possible values are as follows: single.thread : To run the Kafka source on a single thread. topic-wise : To use  separate thread per topic. partition.wise : To use a separate thread per partition. \n         \n         STRING \n         No \n         No \n     \n     \n         partition.no.list \n         The partition number list for the given topic. This is provided as a list of comma-separated values. e.g.,  0,1,2, . \n         0 \n         STRING \n         Yes \n         No \n     \n     \n         seq.enabled \n         If this parameter is set to  true , the sequence of the events received via the source is taken into account. Therefore, each event should contain a sequence number as an attribute value to indicate the sequence. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         is.binary.message \n         To receive the binary events via kafka source, it is needed to set this parameter value to  true . \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         optional.configuration \n         This parameter contains all the other possible configurations that the consumer is created with.  e.g.,  ssl.keystore.type:JKS,batch.size:200 . \n         null \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @App:name('TestExecutionPlan') \ndefine stream BarStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@source(\ntype='kafka', \ntopic.list='kafka_topic,kafka_topic2', \ngroup.id='test', \nthreading.option='partition.wise', \nbootstrap.servers='localhost:9092', \npartition.no.list='0,1', \n@map(type='xml'))\nDefine stream FooStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  This kafka source configuration listens to the  kafka_topic  and  kafka_topic2  topics with  0  and  1  partitions. A thread is created for each topic and partition combination. The events are received in the XML format, mapped to a Siddhi event, and sent to a stream named  FooStream .   EXAMPLE 2  @App:name('TestExecutionPlan') \ndefine stream BarStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@source(\ntype='kafka', \ntopic.list='kafka_topic',\ngroup.id='test', \nthreading.option='single.thread',\nbootstrap.servers='localhost:9092',\n@map(type='xml'))\nDefine stream FooStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  This Kafka source configuration listens to the  kafka_topic  topic for the default partition because no  partition.no.list  is defined. Only one thread is created for the topic. The events are received in the XML format, mapped to a Siddhi event, and sent to a stream named  FooStream .", 
            "title": "kafka (Source)"
        }, 
        {
            "location": "/api/latest/#kafkamultidc-source", 
            "text": "The Kafka Multi Data Center(DC) Source receives records from the same topic in brokers deployed in two different kafka cluster. It will filter out all duplicate messages and try to ensurethat the events are received in the correct order by using sequence numbers. events are received in format such as  text ,  XML  JSON  and  Binary`.The Kafka Source will create the default partition '0' for a given topic, if the topic is not already been created in the Kafka cluster.  Syntax  @source(type= kafkaMultiDC , bootstrap.servers= STRING , topic= STRING , partition.no= INT , is.binary.message= BOOL , optional.configuration= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         bootstrap.servers \n         This should contain the kafka server list which the kafka source should be listening to. This should be given in comma separated values. eg: 'localhost:9092,localhost:9093'  \n         \n         STRING \n         No \n         No \n     \n     \n         topic \n         The topic  which the source would be listening to. eg: 'topic_one'  \n         \n         STRING \n         No \n         No \n     \n     \n         partition.no \n         The partition number for the given topic \n         0 \n         INT \n         Yes \n         No \n     \n     \n         is.binary.message \n         To receive the binary events via KafkaMultiDCSource, it is needed to set this parameter value to  true . \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         optional.configuration \n         This may contain all the other possible configurations which the consumer should be created with.eg: producer.type:async,batch.size:200 \n         null \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @App:name('TestExecutionPlan') \ndefine stream BarStream (symbol string, price float, volume long); \n@info(name = 'query1') \n@source(type='kafkaMultiDC', topic='kafka_topic', bootstrap.servers='host1:9092,host1:9093', partition.no='1', @map(type='xml'))\nDefine stream FooStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  The following query will listen to 'kafka_topic' topic deployed in broker host1:9092 and host1:9093 with partition 1. There will be a thread created for each broker. The receiving xml events will be mapped to a siddhi event and will be send to the FooStream.", 
            "title": "kafkaMultiDC (Source)"
        }, 
        {
            "location": "/license/", 
            "text": "Copyright (c) 2017 WSO2 Inc. (\nhttp://www.wso2.org\n) All Rights Reserved.\n\n\nWSO2 Inc. licenses this file to you under the Apache License,\nVersion 2.0 (the \"License\"); you may not use this file except\nin compliance with the License.\nYou may obtain a copy of the License at\n\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\n\nUnless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\n\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, either express or implied.  See the License for the\nspecific language governing permissions and limitations\nunder the License.\n\n\n-------------------------------------------------------------------------\n                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \nLicense\n shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \nLicensor\n shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \nLegal Entity\n shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \ncontrol\n means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \nYou\n (or \nYour\n) shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \nSource\n form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \nObject\n form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \nWork\n shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \nDerivative Works\n shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \nContribution\n shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \nsubmitted\n\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \nNot a Contribution.\n\n\n   \nContributor\n shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \nNOTICE\n text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \nAS IS\n BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS", 
            "title": "License"
        }
    ]
}